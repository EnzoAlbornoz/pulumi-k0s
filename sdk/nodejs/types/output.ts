// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface API {
    address?: string;
    externalAddress?: string;
    extraArgs?: {[key: string]: string};
    k0sApiPort?: number;
    port?: number;
    sans?: string[];
}

export interface Calico {
    flexVolumeDriverPath?: string;
    ipAutodetectionMethod?: string;
    mode?: string;
    mtu?: number;
    overlay?: string;
    vxlanPort?: number;
    vxlanVNI?: number;
    wireguard?: boolean;
}

export interface Config {
    metadata?: outputs.Metadata;
    spec?: outputs.K0sSpec;
}

export interface ContainerImage {
    image?: string;
    version?: string;
}

export interface ControllerManager {
    extraArgs?: {[key: string]: string};
}

export interface DualStack {
    IPv6podCIDR?: string;
    IPv6serviceCIDR?: string;
    enabled?: boolean;
}

export interface Etcd {
    peerAddress?: string;
}

export interface Hook {
    after?: string[];
    before?: string[];
}

export interface Hooks {
    apply?: outputs.Hook;
    backup?: outputs.Hook;
    reset?: outputs.Hook;
}

export interface Host {
    environment?: {[key: string]: string};
    files?: outputs.UploadFile[];
    hooks?: outputs.Hooks;
    hostname?: string;
    installFlags?: string[];
    k0sBinaryPath?: string;
    localhost?: outputs.Localhost;
    noTaints?: boolean;
    os?: string;
    privateAddress?: string;
    privateInterface?: string;
    role: string;
    ssh?: outputs.SSH;
    uploadBinary?: boolean;
    winRM?: outputs.WinRM;
}

export interface Images {
    calico?: outputs.ImagesCalico;
    coredns?: outputs.ContainerImage;
    default_pull_policy?: string;
    konnectivity?: outputs.ContainerImage;
    kubeproxy?: outputs.ContainerImage;
    kuberouter?: outputs.ImagesKubeRouter;
    metricsserver?: outputs.ContainerImage;
}

export interface ImagesCalico {
    cni?: outputs.ContainerImage;
    kubecontrollers?: outputs.ContainerImage;
    node?: outputs.ContainerImage;
}

export interface ImagesKubeRouter {
    cni?: outputs.ContainerImage;
    cniInstaller?: outputs.ContainerImage;
}

export interface InstallConfig {
    users?: outputs.InstallConfigUsers;
}

export interface InstallConfigUsers {
    etcdUser?: string;
    kineUser?: string;
    konnectivityUser?: string;
    kubeAPIserverUser?: string;
    kubeSchedulerUser?: string;
}

export interface K0s {
    config?: outputs.Config;
    dynamicConfig?: boolean;
    version?: string;
}

export interface K0sSpec {
    api?: outputs.API;
    controllerManager?: outputs.ControllerManager;
    images?: outputs.Images;
    installConfig?: outputs.InstallConfig;
    konnectivity?: outputs.Konnectivity;
    network?: outputs.Network;
    podSecurityPolicy?: outputs.PodSecurityPolicy;
    scheduler?: outputs.Scheduler;
    storage?: outputs.Storage;
    telemetry?: outputs.Telemetry;
}

export interface Konnectivity {
    adminPort?: number;
    agentPort?: number;
}

export interface KubeProxy {
    disabled?: boolean;
    mode?: string;
}

export interface KubeRouter {
    autoMTU?: boolean;
    mtu?: number;
    peerRouterASNs?: string;
    peerRouterIPs?: string;
}

export interface Localhost {
    enabled?: boolean;
}

export interface Metadata {
    name: string;
}

export interface Network {
    calico?: outputs.Calico;
    dualStack?: outputs.DualStack;
    kubeProxy?: outputs.KubeProxy;
    kuberouter?: outputs.KubeRouter;
    podCIDR?: string;
    provider?: string;
    serviceCIDR?: string;
}

export interface PodSecurityPolicy {
    defaultPolicy?: string;
}

export interface SSH {
    address: string;
    bastion?: outputs.SSH;
    hostKey?: string;
    keyPath?: string;
    port?: number;
    user?: string;
}

export interface Scheduler {
    extraArgs?: {[key: string]: string};
}

export interface Spec {
    hosts: outputs.Host[];
    k0s?: outputs.K0s;
}

export interface Storage {
    etcd?: outputs.Etcd;
    type?: string;
}

export interface Telemetry {
    enabled?: boolean;
}

export interface UploadFile {
    dirPerm?: number;
    dst?: string;
    dstDir?: string;
    group?: string;
    name?: string;
    perm?: number;
    src?: string;
    user?: string;
}

export interface WinRM {
    address: string;
    bastion?: outputs.SSH;
    caCertPath?: string;
    certPath?: string;
    insecure?: boolean;
    keyPath?: string;
    password?: string;
    port?: number;
    tlsServerName?: string;
    useHTTPS?: boolean;
    useNTLM?: boolean;
    user?: string;
}

