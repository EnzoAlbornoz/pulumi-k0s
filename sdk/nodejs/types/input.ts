// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface APIArgs {
    k0sApiPort?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
}

export interface ConfigArgs {
    metadata?: pulumi.Input<inputs.MetadataArgs>;
    spec?: pulumi.Input<inputs.K0sSpecArgs>;
}

export interface ContainerImageArgs {
    image?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface HookArgs {
    after?: pulumi.Input<pulumi.Input<string>[]>;
    before?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HooksArgs {
    apply?: pulumi.Input<inputs.HookArgs>;
    backup?: pulumi.Input<inputs.HookArgs>;
    reset?: pulumi.Input<inputs.HookArgs>;
}

export interface HostArgs {
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    files?: pulumi.Input<pulumi.Input<inputs.UploadFileArgs>[]>;
    hooks?: pulumi.Input<inputs.HooksArgs>;
    hostname?: pulumi.Input<string>;
    installFlags?: pulumi.Input<pulumi.Input<string>[]>;
    k0sBinaryPath?: pulumi.Input<string>;
    localhost?: pulumi.Input<inputs.LocalhostArgs>;
    os?: pulumi.Input<string>;
    privateAddress?: pulumi.Input<string>;
    privateInterface?: pulumi.Input<string>;
    role: pulumi.Input<string>;
    ssh?: pulumi.Input<inputs.SSHArgs>;
    uploadBinary?: pulumi.Input<boolean>;
    winRM?: pulumi.Input<inputs.WinRMArgs>;
}

export interface ImagesArgs {
    calico?: pulumi.Input<inputs.ImagesCalicoArgs>;
    coredns?: pulumi.Input<inputs.ContainerImageArgs>;
    default_pull_policy?: pulumi.Input<string>;
    konnectivity?: pulumi.Input<inputs.ContainerImageArgs>;
    kubeproxy?: pulumi.Input<inputs.ContainerImageArgs>;
    kuberouter?: pulumi.Input<inputs.ImagesKubeRouterArgs>;
    metricsserver?: pulumi.Input<inputs.ContainerImageArgs>;
}

export interface ImagesCalicoArgs {
    cni?: pulumi.Input<inputs.ContainerImageArgs>;
    kubecontrollers?: pulumi.Input<inputs.ContainerImageArgs>;
    node?: pulumi.Input<inputs.ContainerImageArgs>;
}

export interface ImagesKubeRouterArgs {
    cni?: pulumi.Input<inputs.ContainerImageArgs>;
    cniInstaller?: pulumi.Input<inputs.ContainerImageArgs>;
}

export interface InstallConfigArgs {
    users?: pulumi.Input<inputs.InstallConfigUsersArgs>;
}

export interface InstallConfigUsersArgs {
    etcdUser?: pulumi.Input<string>;
    kineUser?: pulumi.Input<string>;
    konnectivityUser?: pulumi.Input<string>;
    kubeAPIserverUser?: pulumi.Input<string>;
    kubeSchedulerUser?: pulumi.Input<string>;
}

export interface K0sArgs {
    config?: pulumi.Input<inputs.ConfigArgs>;
    dynamicConfig?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface K0sSpecArgs {
    api?: pulumi.Input<inputs.APIArgs>;
    images?: pulumi.Input<inputs.ImagesArgs>;
    installConfig?: pulumi.Input<inputs.InstallConfigArgs>;
    konnectivity?: pulumi.Input<inputs.KonnectivityArgs>;
    network?: pulumi.Input<inputs.NetworkArgs>;
    podSecurityPolicy?: pulumi.Input<inputs.PodSecurityPolicyArgs>;
    storage?: pulumi.Input<inputs.StorageArgs>;
    telemetry?: pulumi.Input<inputs.TelemetryArgs>;
}

export interface KonnectivityArgs {
    adminPort?: pulumi.Input<number>;
    agentPort?: pulumi.Input<number>;
}

export interface KubeProxyArgs {
    disabled?: pulumi.Input<boolean>;
    mode?: pulumi.Input<string>;
}

export interface KubeRouterArgs {
    autoMTU?: pulumi.Input<boolean>;
    mtu?: pulumi.Input<number>;
    peerRouterASNs?: pulumi.Input<string>;
    peerRouterIPs?: pulumi.Input<string>;
}

export interface LocalhostArgs {
    enabled?: pulumi.Input<boolean>;
}

export interface MetadataArgs {
    name: pulumi.Input<string>;
}

export interface NetworkArgs {
    kubeProxy?: pulumi.Input<inputs.KubeProxyArgs>;
    kuberouter?: pulumi.Input<inputs.KubeRouterArgs>;
    podCIDR?: pulumi.Input<string>;
    provider?: pulumi.Input<string>;
    serviceCIDR?: pulumi.Input<string>;
}

export interface PodSecurityPolicyArgs {
    defaultPolicy?: pulumi.Input<string>;
}

export interface SSHArgs {
    address: pulumi.Input<string>;
    bastion?: pulumi.Input<inputs.SSHArgs>;
    hostKey?: pulumi.Input<string>;
    keyPath?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    user?: pulumi.Input<string>;
}

export interface SpecArgs {
    hosts: pulumi.Input<pulumi.Input<inputs.HostArgs>[]>;
    k0s?: pulumi.Input<inputs.K0sArgs>;
}

export interface StorageArgs {
    type?: pulumi.Input<string>;
}

export interface TelemetryArgs {
    enabled?: pulumi.Input<boolean>;
}

export interface UploadFileArgs {
    dirPerm?: pulumi.Input<number>;
    dst?: pulumi.Input<string>;
    dstDir?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    perm?: pulumi.Input<number>;
    src?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface WinRMArgs {
    address: pulumi.Input<string>;
    bastion?: pulumi.Input<inputs.SSHArgs>;
    caCertPath?: pulumi.Input<string>;
    certPath?: pulumi.Input<string>;
    insecure?: pulumi.Input<boolean>;
    keyPath?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    tlsServerName?: pulumi.Input<string>;
    useHTTPS?: pulumi.Input<boolean>;
    useNTLM?: pulumi.Input<boolean>;
    user?: pulumi.Input<string>;
}
