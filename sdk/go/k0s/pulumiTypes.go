// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package k0s

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type API struct {
	Address         *string  `pulumi:"address"`
	ExternalAddress *string  `pulumi:"externalAddress"`
	K0sApiPort      *float64 `pulumi:"k0sApiPort"`
	Port            *float64 `pulumi:"port"`
	Sans            []string `pulumi:"sans"`
}

// APIInput is an input type that accepts APIArgs and APIOutput values.
// You can construct a concrete instance of `APIInput` via:
//
//          APIArgs{...}
type APIInput interface {
	pulumi.Input

	ToAPIOutput() APIOutput
	ToAPIOutputWithContext(context.Context) APIOutput
}

type APIArgs struct {
	Address         pulumi.StringPtrInput   `pulumi:"address"`
	ExternalAddress pulumi.StringPtrInput   `pulumi:"externalAddress"`
	K0sApiPort      pulumi.Float64PtrInput  `pulumi:"k0sApiPort"`
	Port            pulumi.Float64PtrInput  `pulumi:"port"`
	Sans            pulumi.StringArrayInput `pulumi:"sans"`
}

func (APIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*API)(nil)).Elem()
}

func (i APIArgs) ToAPIOutput() APIOutput {
	return i.ToAPIOutputWithContext(context.Background())
}

func (i APIArgs) ToAPIOutputWithContext(ctx context.Context) APIOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIOutput)
}

func (i APIArgs) ToAPIPtrOutput() APIPtrOutput {
	return i.ToAPIPtrOutputWithContext(context.Background())
}

func (i APIArgs) ToAPIPtrOutputWithContext(ctx context.Context) APIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIOutput).ToAPIPtrOutputWithContext(ctx)
}

// APIPtrInput is an input type that accepts APIArgs, APIPtr and APIPtrOutput values.
// You can construct a concrete instance of `APIPtrInput` via:
//
//          APIArgs{...}
//
//  or:
//
//          nil
type APIPtrInput interface {
	pulumi.Input

	ToAPIPtrOutput() APIPtrOutput
	ToAPIPtrOutputWithContext(context.Context) APIPtrOutput
}

type apiPtrType APIArgs

func APIPtr(v *APIArgs) APIPtrInput {
	return (*apiPtrType)(v)
}

func (*apiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**API)(nil)).Elem()
}

func (i *apiPtrType) ToAPIPtrOutput() APIPtrOutput {
	return i.ToAPIPtrOutputWithContext(context.Background())
}

func (i *apiPtrType) ToAPIPtrOutputWithContext(ctx context.Context) APIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIPtrOutput)
}

type APIOutput struct{ *pulumi.OutputState }

func (APIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*API)(nil)).Elem()
}

func (o APIOutput) ToAPIOutput() APIOutput {
	return o
}

func (o APIOutput) ToAPIOutputWithContext(ctx context.Context) APIOutput {
	return o
}

func (o APIOutput) ToAPIPtrOutput() APIPtrOutput {
	return o.ToAPIPtrOutputWithContext(context.Background())
}

func (o APIOutput) ToAPIPtrOutputWithContext(ctx context.Context) APIPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v API) *API {
		return &v
	}).(APIPtrOutput)
}

func (o APIOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v API) *string { return v.Address }).(pulumi.StringPtrOutput)
}

func (o APIOutput) ExternalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v API) *string { return v.ExternalAddress }).(pulumi.StringPtrOutput)
}

func (o APIOutput) K0sApiPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v API) *float64 { return v.K0sApiPort }).(pulumi.Float64PtrOutput)
}

func (o APIOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v API) *float64 { return v.Port }).(pulumi.Float64PtrOutput)
}

func (o APIOutput) Sans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v API) []string { return v.Sans }).(pulumi.StringArrayOutput)
}

type APIPtrOutput struct{ *pulumi.OutputState }

func (APIPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**API)(nil)).Elem()
}

func (o APIPtrOutput) ToAPIPtrOutput() APIPtrOutput {
	return o
}

func (o APIPtrOutput) ToAPIPtrOutputWithContext(ctx context.Context) APIPtrOutput {
	return o
}

func (o APIPtrOutput) Elem() APIOutput {
	return o.ApplyT(func(v *API) API {
		if v != nil {
			return *v
		}
		var ret API
		return ret
	}).(APIOutput)
}

func (o APIPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *API) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

func (o APIPtrOutput) ExternalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *API) *string {
		if v == nil {
			return nil
		}
		return v.ExternalAddress
	}).(pulumi.StringPtrOutput)
}

func (o APIPtrOutput) K0sApiPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *API) *float64 {
		if v == nil {
			return nil
		}
		return v.K0sApiPort
	}).(pulumi.Float64PtrOutput)
}

func (o APIPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *API) *float64 {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.Float64PtrOutput)
}

func (o APIPtrOutput) Sans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *API) []string {
		if v == nil {
			return nil
		}
		return v.Sans
	}).(pulumi.StringArrayOutput)
}

type Calico struct {
	FlexVolumeDriverPath  *string  `pulumi:"flexVolumeDriverPath"`
	IpAutodetectionMethod *string  `pulumi:"ipAutodetectionMethod"`
	Mode                  *string  `pulumi:"mode"`
	Mtu                   *float64 `pulumi:"mtu"`
	Overlay               *string  `pulumi:"overlay"`
	VxlanPort             *float64 `pulumi:"vxlanPort"`
	VxlanVNI              *float64 `pulumi:"vxlanVNI"`
	Wireguard             *bool    `pulumi:"wireguard"`
}

// CalicoInput is an input type that accepts CalicoArgs and CalicoOutput values.
// You can construct a concrete instance of `CalicoInput` via:
//
//          CalicoArgs{...}
type CalicoInput interface {
	pulumi.Input

	ToCalicoOutput() CalicoOutput
	ToCalicoOutputWithContext(context.Context) CalicoOutput
}

type CalicoArgs struct {
	FlexVolumeDriverPath  pulumi.StringPtrInput  `pulumi:"flexVolumeDriverPath"`
	IpAutodetectionMethod pulumi.StringPtrInput  `pulumi:"ipAutodetectionMethod"`
	Mode                  pulumi.StringPtrInput  `pulumi:"mode"`
	Mtu                   pulumi.Float64PtrInput `pulumi:"mtu"`
	Overlay               pulumi.StringPtrInput  `pulumi:"overlay"`
	VxlanPort             pulumi.Float64PtrInput `pulumi:"vxlanPort"`
	VxlanVNI              pulumi.Float64PtrInput `pulumi:"vxlanVNI"`
	Wireguard             pulumi.BoolPtrInput    `pulumi:"wireguard"`
}

func (CalicoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Calico)(nil)).Elem()
}

func (i CalicoArgs) ToCalicoOutput() CalicoOutput {
	return i.ToCalicoOutputWithContext(context.Background())
}

func (i CalicoArgs) ToCalicoOutputWithContext(ctx context.Context) CalicoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalicoOutput)
}

func (i CalicoArgs) ToCalicoPtrOutput() CalicoPtrOutput {
	return i.ToCalicoPtrOutputWithContext(context.Background())
}

func (i CalicoArgs) ToCalicoPtrOutputWithContext(ctx context.Context) CalicoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalicoOutput).ToCalicoPtrOutputWithContext(ctx)
}

// CalicoPtrInput is an input type that accepts CalicoArgs, CalicoPtr and CalicoPtrOutput values.
// You can construct a concrete instance of `CalicoPtrInput` via:
//
//          CalicoArgs{...}
//
//  or:
//
//          nil
type CalicoPtrInput interface {
	pulumi.Input

	ToCalicoPtrOutput() CalicoPtrOutput
	ToCalicoPtrOutputWithContext(context.Context) CalicoPtrOutput
}

type calicoPtrType CalicoArgs

func CalicoPtr(v *CalicoArgs) CalicoPtrInput {
	return (*calicoPtrType)(v)
}

func (*calicoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Calico)(nil)).Elem()
}

func (i *calicoPtrType) ToCalicoPtrOutput() CalicoPtrOutput {
	return i.ToCalicoPtrOutputWithContext(context.Background())
}

func (i *calicoPtrType) ToCalicoPtrOutputWithContext(ctx context.Context) CalicoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalicoPtrOutput)
}

type CalicoOutput struct{ *pulumi.OutputState }

func (CalicoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Calico)(nil)).Elem()
}

func (o CalicoOutput) ToCalicoOutput() CalicoOutput {
	return o
}

func (o CalicoOutput) ToCalicoOutputWithContext(ctx context.Context) CalicoOutput {
	return o
}

func (o CalicoOutput) ToCalicoPtrOutput() CalicoPtrOutput {
	return o.ToCalicoPtrOutputWithContext(context.Background())
}

func (o CalicoOutput) ToCalicoPtrOutputWithContext(ctx context.Context) CalicoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Calico) *Calico {
		return &v
	}).(CalicoPtrOutput)
}

func (o CalicoOutput) FlexVolumeDriverPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Calico) *string { return v.FlexVolumeDriverPath }).(pulumi.StringPtrOutput)
}

func (o CalicoOutput) IpAutodetectionMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Calico) *string { return v.IpAutodetectionMethod }).(pulumi.StringPtrOutput)
}

func (o CalicoOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Calico) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o CalicoOutput) Mtu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Calico) *float64 { return v.Mtu }).(pulumi.Float64PtrOutput)
}

func (o CalicoOutput) Overlay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Calico) *string { return v.Overlay }).(pulumi.StringPtrOutput)
}

func (o CalicoOutput) VxlanPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Calico) *float64 { return v.VxlanPort }).(pulumi.Float64PtrOutput)
}

func (o CalicoOutput) VxlanVNI() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Calico) *float64 { return v.VxlanVNI }).(pulumi.Float64PtrOutput)
}

func (o CalicoOutput) Wireguard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Calico) *bool { return v.Wireguard }).(pulumi.BoolPtrOutput)
}

type CalicoPtrOutput struct{ *pulumi.OutputState }

func (CalicoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Calico)(nil)).Elem()
}

func (o CalicoPtrOutput) ToCalicoPtrOutput() CalicoPtrOutput {
	return o
}

func (o CalicoPtrOutput) ToCalicoPtrOutputWithContext(ctx context.Context) CalicoPtrOutput {
	return o
}

func (o CalicoPtrOutput) Elem() CalicoOutput {
	return o.ApplyT(func(v *Calico) Calico {
		if v != nil {
			return *v
		}
		var ret Calico
		return ret
	}).(CalicoOutput)
}

func (o CalicoPtrOutput) FlexVolumeDriverPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Calico) *string {
		if v == nil {
			return nil
		}
		return v.FlexVolumeDriverPath
	}).(pulumi.StringPtrOutput)
}

func (o CalicoPtrOutput) IpAutodetectionMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Calico) *string {
		if v == nil {
			return nil
		}
		return v.IpAutodetectionMethod
	}).(pulumi.StringPtrOutput)
}

func (o CalicoPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Calico) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o CalicoPtrOutput) Mtu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Calico) *float64 {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.Float64PtrOutput)
}

func (o CalicoPtrOutput) Overlay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Calico) *string {
		if v == nil {
			return nil
		}
		return v.Overlay
	}).(pulumi.StringPtrOutput)
}

func (o CalicoPtrOutput) VxlanPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Calico) *float64 {
		if v == nil {
			return nil
		}
		return v.VxlanPort
	}).(pulumi.Float64PtrOutput)
}

func (o CalicoPtrOutput) VxlanVNI() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Calico) *float64 {
		if v == nil {
			return nil
		}
		return v.VxlanVNI
	}).(pulumi.Float64PtrOutput)
}

func (o CalicoPtrOutput) Wireguard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Calico) *bool {
		if v == nil {
			return nil
		}
		return v.Wireguard
	}).(pulumi.BoolPtrOutput)
}

type Config struct {
	Metadata *Metadata `pulumi:"metadata"`
	Spec     *K0sSpec  `pulumi:"spec"`
}

// ConfigInput is an input type that accepts ConfigArgs and ConfigOutput values.
// You can construct a concrete instance of `ConfigInput` via:
//
//          ConfigArgs{...}
type ConfigInput interface {
	pulumi.Input

	ToConfigOutput() ConfigOutput
	ToConfigOutputWithContext(context.Context) ConfigOutput
}

type ConfigArgs struct {
	Metadata MetadataPtrInput `pulumi:"metadata"`
	Spec     K0sSpecPtrInput  `pulumi:"spec"`
}

func (ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Config)(nil)).Elem()
}

func (i ConfigArgs) ToConfigOutput() ConfigOutput {
	return i.ToConfigOutputWithContext(context.Background())
}

func (i ConfigArgs) ToConfigOutputWithContext(ctx context.Context) ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigOutput)
}

func (i ConfigArgs) ToConfigPtrOutput() ConfigPtrOutput {
	return i.ToConfigPtrOutputWithContext(context.Background())
}

func (i ConfigArgs) ToConfigPtrOutputWithContext(ctx context.Context) ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigOutput).ToConfigPtrOutputWithContext(ctx)
}

// ConfigPtrInput is an input type that accepts ConfigArgs, ConfigPtr and ConfigPtrOutput values.
// You can construct a concrete instance of `ConfigPtrInput` via:
//
//          ConfigArgs{...}
//
//  or:
//
//          nil
type ConfigPtrInput interface {
	pulumi.Input

	ToConfigPtrOutput() ConfigPtrOutput
	ToConfigPtrOutputWithContext(context.Context) ConfigPtrOutput
}

type configPtrType ConfigArgs

func ConfigPtr(v *ConfigArgs) ConfigPtrInput {
	return (*configPtrType)(v)
}

func (*configPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Config)(nil)).Elem()
}

func (i *configPtrType) ToConfigPtrOutput() ConfigPtrOutput {
	return i.ToConfigPtrOutputWithContext(context.Background())
}

func (i *configPtrType) ToConfigPtrOutputWithContext(ctx context.Context) ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigPtrOutput)
}

type ConfigOutput struct{ *pulumi.OutputState }

func (ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Config)(nil)).Elem()
}

func (o ConfigOutput) ToConfigOutput() ConfigOutput {
	return o
}

func (o ConfigOutput) ToConfigOutputWithContext(ctx context.Context) ConfigOutput {
	return o
}

func (o ConfigOutput) ToConfigPtrOutput() ConfigPtrOutput {
	return o.ToConfigPtrOutputWithContext(context.Background())
}

func (o ConfigOutput) ToConfigPtrOutputWithContext(ctx context.Context) ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Config) *Config {
		return &v
	}).(ConfigPtrOutput)
}

func (o ConfigOutput) Metadata() MetadataPtrOutput {
	return o.ApplyT(func(v Config) *Metadata { return v.Metadata }).(MetadataPtrOutput)
}

func (o ConfigOutput) Spec() K0sSpecPtrOutput {
	return o.ApplyT(func(v Config) *K0sSpec { return v.Spec }).(K0sSpecPtrOutput)
}

type ConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Config)(nil)).Elem()
}

func (o ConfigPtrOutput) ToConfigPtrOutput() ConfigPtrOutput {
	return o
}

func (o ConfigPtrOutput) ToConfigPtrOutputWithContext(ctx context.Context) ConfigPtrOutput {
	return o
}

func (o ConfigPtrOutput) Elem() ConfigOutput {
	return o.ApplyT(func(v *Config) Config {
		if v != nil {
			return *v
		}
		var ret Config
		return ret
	}).(ConfigOutput)
}

func (o ConfigPtrOutput) Metadata() MetadataPtrOutput {
	return o.ApplyT(func(v *Config) *Metadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataPtrOutput)
}

func (o ConfigPtrOutput) Spec() K0sSpecPtrOutput {
	return o.ApplyT(func(v *Config) *K0sSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(K0sSpecPtrOutput)
}

type ContainerImage struct {
	Image   *string `pulumi:"image"`
	Version *string `pulumi:"version"`
}

// ContainerImageInput is an input type that accepts ContainerImageArgs and ContainerImageOutput values.
// You can construct a concrete instance of `ContainerImageInput` via:
//
//          ContainerImageArgs{...}
type ContainerImageInput interface {
	pulumi.Input

	ToContainerImageOutput() ContainerImageOutput
	ToContainerImageOutputWithContext(context.Context) ContainerImageOutput
}

type ContainerImageArgs struct {
	Image   pulumi.StringPtrInput `pulumi:"image"`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ContainerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (i ContainerImageArgs) ToContainerImageOutput() ContainerImageOutput {
	return i.ToContainerImageOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput)
}

func (i ContainerImageArgs) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput).ToContainerImagePtrOutputWithContext(ctx)
}

// ContainerImagePtrInput is an input type that accepts ContainerImageArgs, ContainerImagePtr and ContainerImagePtrOutput values.
// You can construct a concrete instance of `ContainerImagePtrInput` via:
//
//          ContainerImageArgs{...}
//
//  or:
//
//          nil
type ContainerImagePtrInput interface {
	pulumi.Input

	ToContainerImagePtrOutput() ContainerImagePtrOutput
	ToContainerImagePtrOutputWithContext(context.Context) ContainerImagePtrOutput
}

type containerImagePtrType ContainerImageArgs

func ContainerImagePtr(v *ContainerImageArgs) ContainerImagePtrInput {
	return (*containerImagePtrType)(v)
}

func (*containerImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (i *containerImagePtrType) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i *containerImagePtrType) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImagePtrOutput)
}

type ContainerImageOutput struct{ *pulumi.OutputState }

func (ContainerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (o ContainerImageOutput) ToContainerImageOutput() ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o.ToContainerImagePtrOutputWithContext(context.Background())
}

func (o ContainerImageOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerImage) *ContainerImage {
		return &v
	}).(ContainerImagePtrOutput)
}

func (o ContainerImageOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImage) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o ContainerImageOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImage) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ContainerImagePtrOutput struct{ *pulumi.OutputState }

func (ContainerImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) Elem() ContainerImageOutput {
	return o.ApplyT(func(v *ContainerImage) ContainerImage {
		if v != nil {
			return *v
		}
		var ret ContainerImage
		return ret
	}).(ContainerImageOutput)
}

func (o ContainerImagePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o ContainerImagePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DualStack struct {
	IPv6podCIDR     *string `pulumi:"IPv6podCIDR"`
	IPv6serviceCIDR *string `pulumi:"IPv6serviceCIDR"`
	Enabled         *bool   `pulumi:"enabled"`
}

// DualStackInput is an input type that accepts DualStackArgs and DualStackOutput values.
// You can construct a concrete instance of `DualStackInput` via:
//
//          DualStackArgs{...}
type DualStackInput interface {
	pulumi.Input

	ToDualStackOutput() DualStackOutput
	ToDualStackOutputWithContext(context.Context) DualStackOutput
}

type DualStackArgs struct {
	IPv6podCIDR     pulumi.StringPtrInput `pulumi:"IPv6podCIDR"`
	IPv6serviceCIDR pulumi.StringPtrInput `pulumi:"IPv6serviceCIDR"`
	Enabled         pulumi.BoolPtrInput   `pulumi:"enabled"`
}

func (DualStackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DualStack)(nil)).Elem()
}

func (i DualStackArgs) ToDualStackOutput() DualStackOutput {
	return i.ToDualStackOutputWithContext(context.Background())
}

func (i DualStackArgs) ToDualStackOutputWithContext(ctx context.Context) DualStackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DualStackOutput)
}

func (i DualStackArgs) ToDualStackPtrOutput() DualStackPtrOutput {
	return i.ToDualStackPtrOutputWithContext(context.Background())
}

func (i DualStackArgs) ToDualStackPtrOutputWithContext(ctx context.Context) DualStackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DualStackOutput).ToDualStackPtrOutputWithContext(ctx)
}

// DualStackPtrInput is an input type that accepts DualStackArgs, DualStackPtr and DualStackPtrOutput values.
// You can construct a concrete instance of `DualStackPtrInput` via:
//
//          DualStackArgs{...}
//
//  or:
//
//          nil
type DualStackPtrInput interface {
	pulumi.Input

	ToDualStackPtrOutput() DualStackPtrOutput
	ToDualStackPtrOutputWithContext(context.Context) DualStackPtrOutput
}

type dualStackPtrType DualStackArgs

func DualStackPtr(v *DualStackArgs) DualStackPtrInput {
	return (*dualStackPtrType)(v)
}

func (*dualStackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DualStack)(nil)).Elem()
}

func (i *dualStackPtrType) ToDualStackPtrOutput() DualStackPtrOutput {
	return i.ToDualStackPtrOutputWithContext(context.Background())
}

func (i *dualStackPtrType) ToDualStackPtrOutputWithContext(ctx context.Context) DualStackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DualStackPtrOutput)
}

type DualStackOutput struct{ *pulumi.OutputState }

func (DualStackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DualStack)(nil)).Elem()
}

func (o DualStackOutput) ToDualStackOutput() DualStackOutput {
	return o
}

func (o DualStackOutput) ToDualStackOutputWithContext(ctx context.Context) DualStackOutput {
	return o
}

func (o DualStackOutput) ToDualStackPtrOutput() DualStackPtrOutput {
	return o.ToDualStackPtrOutputWithContext(context.Background())
}

func (o DualStackOutput) ToDualStackPtrOutputWithContext(ctx context.Context) DualStackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DualStack) *DualStack {
		return &v
	}).(DualStackPtrOutput)
}

func (o DualStackOutput) IPv6podCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DualStack) *string { return v.IPv6podCIDR }).(pulumi.StringPtrOutput)
}

func (o DualStackOutput) IPv6serviceCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DualStack) *string { return v.IPv6serviceCIDR }).(pulumi.StringPtrOutput)
}

func (o DualStackOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DualStack) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DualStackPtrOutput struct{ *pulumi.OutputState }

func (DualStackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DualStack)(nil)).Elem()
}

func (o DualStackPtrOutput) ToDualStackPtrOutput() DualStackPtrOutput {
	return o
}

func (o DualStackPtrOutput) ToDualStackPtrOutputWithContext(ctx context.Context) DualStackPtrOutput {
	return o
}

func (o DualStackPtrOutput) Elem() DualStackOutput {
	return o.ApplyT(func(v *DualStack) DualStack {
		if v != nil {
			return *v
		}
		var ret DualStack
		return ret
	}).(DualStackOutput)
}

func (o DualStackPtrOutput) IPv6podCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DualStack) *string {
		if v == nil {
			return nil
		}
		return v.IPv6podCIDR
	}).(pulumi.StringPtrOutput)
}

func (o DualStackPtrOutput) IPv6serviceCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DualStack) *string {
		if v == nil {
			return nil
		}
		return v.IPv6serviceCIDR
	}).(pulumi.StringPtrOutput)
}

func (o DualStackPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DualStack) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type Etcd struct {
	PeerAddress *string `pulumi:"peerAddress"`
}

// EtcdInput is an input type that accepts EtcdArgs and EtcdOutput values.
// You can construct a concrete instance of `EtcdInput` via:
//
//          EtcdArgs{...}
type EtcdInput interface {
	pulumi.Input

	ToEtcdOutput() EtcdOutput
	ToEtcdOutputWithContext(context.Context) EtcdOutput
}

type EtcdArgs struct {
	PeerAddress pulumi.StringPtrInput `pulumi:"peerAddress"`
}

func (EtcdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Etcd)(nil)).Elem()
}

func (i EtcdArgs) ToEtcdOutput() EtcdOutput {
	return i.ToEtcdOutputWithContext(context.Background())
}

func (i EtcdArgs) ToEtcdOutputWithContext(ctx context.Context) EtcdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdOutput)
}

func (i EtcdArgs) ToEtcdPtrOutput() EtcdPtrOutput {
	return i.ToEtcdPtrOutputWithContext(context.Background())
}

func (i EtcdArgs) ToEtcdPtrOutputWithContext(ctx context.Context) EtcdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdOutput).ToEtcdPtrOutputWithContext(ctx)
}

// EtcdPtrInput is an input type that accepts EtcdArgs, EtcdPtr and EtcdPtrOutput values.
// You can construct a concrete instance of `EtcdPtrInput` via:
//
//          EtcdArgs{...}
//
//  or:
//
//          nil
type EtcdPtrInput interface {
	pulumi.Input

	ToEtcdPtrOutput() EtcdPtrOutput
	ToEtcdPtrOutputWithContext(context.Context) EtcdPtrOutput
}

type etcdPtrType EtcdArgs

func EtcdPtr(v *EtcdArgs) EtcdPtrInput {
	return (*etcdPtrType)(v)
}

func (*etcdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Etcd)(nil)).Elem()
}

func (i *etcdPtrType) ToEtcdPtrOutput() EtcdPtrOutput {
	return i.ToEtcdPtrOutputWithContext(context.Background())
}

func (i *etcdPtrType) ToEtcdPtrOutputWithContext(ctx context.Context) EtcdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdPtrOutput)
}

type EtcdOutput struct{ *pulumi.OutputState }

func (EtcdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Etcd)(nil)).Elem()
}

func (o EtcdOutput) ToEtcdOutput() EtcdOutput {
	return o
}

func (o EtcdOutput) ToEtcdOutputWithContext(ctx context.Context) EtcdOutput {
	return o
}

func (o EtcdOutput) ToEtcdPtrOutput() EtcdPtrOutput {
	return o.ToEtcdPtrOutputWithContext(context.Background())
}

func (o EtcdOutput) ToEtcdPtrOutputWithContext(ctx context.Context) EtcdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Etcd) *Etcd {
		return &v
	}).(EtcdPtrOutput)
}

func (o EtcdOutput) PeerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Etcd) *string { return v.PeerAddress }).(pulumi.StringPtrOutput)
}

type EtcdPtrOutput struct{ *pulumi.OutputState }

func (EtcdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Etcd)(nil)).Elem()
}

func (o EtcdPtrOutput) ToEtcdPtrOutput() EtcdPtrOutput {
	return o
}

func (o EtcdPtrOutput) ToEtcdPtrOutputWithContext(ctx context.Context) EtcdPtrOutput {
	return o
}

func (o EtcdPtrOutput) Elem() EtcdOutput {
	return o.ApplyT(func(v *Etcd) Etcd {
		if v != nil {
			return *v
		}
		var ret Etcd
		return ret
	}).(EtcdOutput)
}

func (o EtcdPtrOutput) PeerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Etcd) *string {
		if v == nil {
			return nil
		}
		return v.PeerAddress
	}).(pulumi.StringPtrOutput)
}

type Hook struct {
	After  []string `pulumi:"after"`
	Before []string `pulumi:"before"`
}

// HookInput is an input type that accepts HookArgs and HookOutput values.
// You can construct a concrete instance of `HookInput` via:
//
//          HookArgs{...}
type HookInput interface {
	pulumi.Input

	ToHookOutput() HookOutput
	ToHookOutputWithContext(context.Context) HookOutput
}

type HookArgs struct {
	After  pulumi.StringArrayInput `pulumi:"after"`
	Before pulumi.StringArrayInput `pulumi:"before"`
}

func (HookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hook)(nil)).Elem()
}

func (i HookArgs) ToHookOutput() HookOutput {
	return i.ToHookOutputWithContext(context.Background())
}

func (i HookArgs) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookOutput)
}

func (i HookArgs) ToHookPtrOutput() HookPtrOutput {
	return i.ToHookPtrOutputWithContext(context.Background())
}

func (i HookArgs) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookOutput).ToHookPtrOutputWithContext(ctx)
}

// HookPtrInput is an input type that accepts HookArgs, HookPtr and HookPtrOutput values.
// You can construct a concrete instance of `HookPtrInput` via:
//
//          HookArgs{...}
//
//  or:
//
//          nil
type HookPtrInput interface {
	pulumi.Input

	ToHookPtrOutput() HookPtrOutput
	ToHookPtrOutputWithContext(context.Context) HookPtrOutput
}

type hookPtrType HookArgs

func HookPtr(v *HookArgs) HookPtrInput {
	return (*hookPtrType)(v)
}

func (*hookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil)).Elem()
}

func (i *hookPtrType) ToHookPtrOutput() HookPtrOutput {
	return i.ToHookPtrOutputWithContext(context.Background())
}

func (i *hookPtrType) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookPtrOutput)
}

type HookOutput struct{ *pulumi.OutputState }

func (HookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hook)(nil)).Elem()
}

func (o HookOutput) ToHookOutput() HookOutput {
	return o
}

func (o HookOutput) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return o
}

func (o HookOutput) ToHookPtrOutput() HookPtrOutput {
	return o.ToHookPtrOutputWithContext(context.Background())
}

func (o HookOutput) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Hook) *Hook {
		return &v
	}).(HookPtrOutput)
}

func (o HookOutput) After() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Hook) []string { return v.After }).(pulumi.StringArrayOutput)
}

func (o HookOutput) Before() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Hook) []string { return v.Before }).(pulumi.StringArrayOutput)
}

type HookPtrOutput struct{ *pulumi.OutputState }

func (HookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil)).Elem()
}

func (o HookPtrOutput) ToHookPtrOutput() HookPtrOutput {
	return o
}

func (o HookPtrOutput) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return o
}

func (o HookPtrOutput) Elem() HookOutput {
	return o.ApplyT(func(v *Hook) Hook {
		if v != nil {
			return *v
		}
		var ret Hook
		return ret
	}).(HookOutput)
}

func (o HookPtrOutput) After() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Hook) []string {
		if v == nil {
			return nil
		}
		return v.After
	}).(pulumi.StringArrayOutput)
}

func (o HookPtrOutput) Before() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Hook) []string {
		if v == nil {
			return nil
		}
		return v.Before
	}).(pulumi.StringArrayOutput)
}

type Hooks struct {
	Apply  *Hook `pulumi:"apply"`
	Backup *Hook `pulumi:"backup"`
	Reset  *Hook `pulumi:"reset"`
}

// HooksInput is an input type that accepts HooksArgs and HooksOutput values.
// You can construct a concrete instance of `HooksInput` via:
//
//          HooksArgs{...}
type HooksInput interface {
	pulumi.Input

	ToHooksOutput() HooksOutput
	ToHooksOutputWithContext(context.Context) HooksOutput
}

type HooksArgs struct {
	Apply  HookPtrInput `pulumi:"apply"`
	Backup HookPtrInput `pulumi:"backup"`
	Reset  HookPtrInput `pulumi:"reset"`
}

func (HooksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hooks)(nil)).Elem()
}

func (i HooksArgs) ToHooksOutput() HooksOutput {
	return i.ToHooksOutputWithContext(context.Background())
}

func (i HooksArgs) ToHooksOutputWithContext(ctx context.Context) HooksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HooksOutput)
}

func (i HooksArgs) ToHooksPtrOutput() HooksPtrOutput {
	return i.ToHooksPtrOutputWithContext(context.Background())
}

func (i HooksArgs) ToHooksPtrOutputWithContext(ctx context.Context) HooksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HooksOutput).ToHooksPtrOutputWithContext(ctx)
}

// HooksPtrInput is an input type that accepts HooksArgs, HooksPtr and HooksPtrOutput values.
// You can construct a concrete instance of `HooksPtrInput` via:
//
//          HooksArgs{...}
//
//  or:
//
//          nil
type HooksPtrInput interface {
	pulumi.Input

	ToHooksPtrOutput() HooksPtrOutput
	ToHooksPtrOutputWithContext(context.Context) HooksPtrOutput
}

type hooksPtrType HooksArgs

func HooksPtr(v *HooksArgs) HooksPtrInput {
	return (*hooksPtrType)(v)
}

func (*hooksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hooks)(nil)).Elem()
}

func (i *hooksPtrType) ToHooksPtrOutput() HooksPtrOutput {
	return i.ToHooksPtrOutputWithContext(context.Background())
}

func (i *hooksPtrType) ToHooksPtrOutputWithContext(ctx context.Context) HooksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HooksPtrOutput)
}

type HooksOutput struct{ *pulumi.OutputState }

func (HooksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hooks)(nil)).Elem()
}

func (o HooksOutput) ToHooksOutput() HooksOutput {
	return o
}

func (o HooksOutput) ToHooksOutputWithContext(ctx context.Context) HooksOutput {
	return o
}

func (o HooksOutput) ToHooksPtrOutput() HooksPtrOutput {
	return o.ToHooksPtrOutputWithContext(context.Background())
}

func (o HooksOutput) ToHooksPtrOutputWithContext(ctx context.Context) HooksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Hooks) *Hooks {
		return &v
	}).(HooksPtrOutput)
}

func (o HooksOutput) Apply() HookPtrOutput {
	return o.ApplyT(func(v Hooks) *Hook { return v.Apply }).(HookPtrOutput)
}

func (o HooksOutput) Backup() HookPtrOutput {
	return o.ApplyT(func(v Hooks) *Hook { return v.Backup }).(HookPtrOutput)
}

func (o HooksOutput) Reset() HookPtrOutput {
	return o.ApplyT(func(v Hooks) *Hook { return v.Reset }).(HookPtrOutput)
}

type HooksPtrOutput struct{ *pulumi.OutputState }

func (HooksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hooks)(nil)).Elem()
}

func (o HooksPtrOutput) ToHooksPtrOutput() HooksPtrOutput {
	return o
}

func (o HooksPtrOutput) ToHooksPtrOutputWithContext(ctx context.Context) HooksPtrOutput {
	return o
}

func (o HooksPtrOutput) Elem() HooksOutput {
	return o.ApplyT(func(v *Hooks) Hooks {
		if v != nil {
			return *v
		}
		var ret Hooks
		return ret
	}).(HooksOutput)
}

func (o HooksPtrOutput) Apply() HookPtrOutput {
	return o.ApplyT(func(v *Hooks) *Hook {
		if v == nil {
			return nil
		}
		return v.Apply
	}).(HookPtrOutput)
}

func (o HooksPtrOutput) Backup() HookPtrOutput {
	return o.ApplyT(func(v *Hooks) *Hook {
		if v == nil {
			return nil
		}
		return v.Backup
	}).(HookPtrOutput)
}

func (o HooksPtrOutput) Reset() HookPtrOutput {
	return o.ApplyT(func(v *Hooks) *Hook {
		if v == nil {
			return nil
		}
		return v.Reset
	}).(HookPtrOutput)
}

type Host struct {
	Environment      map[string]string `pulumi:"environment"`
	Files            []UploadFile      `pulumi:"files"`
	Hooks            *Hooks            `pulumi:"hooks"`
	Hostname         *string           `pulumi:"hostname"`
	InstallFlags     []string          `pulumi:"installFlags"`
	K0sBinaryPath    *string           `pulumi:"k0sBinaryPath"`
	Localhost        *Localhost        `pulumi:"localhost"`
	Os               *string           `pulumi:"os"`
	PrivateAddress   *string           `pulumi:"privateAddress"`
	PrivateInterface *string           `pulumi:"privateInterface"`
	Role             string            `pulumi:"role"`
	Ssh              *SSH              `pulumi:"ssh"`
	UploadBinary     *bool             `pulumi:"uploadBinary"`
	WinRM            *WinRM            `pulumi:"winRM"`
}

// HostInput is an input type that accepts HostArgs and HostOutput values.
// You can construct a concrete instance of `HostInput` via:
//
//          HostArgs{...}
type HostInput interface {
	pulumi.Input

	ToHostOutput() HostOutput
	ToHostOutputWithContext(context.Context) HostOutput
}

type HostArgs struct {
	Environment      pulumi.StringMapInput   `pulumi:"environment"`
	Files            UploadFileArrayInput    `pulumi:"files"`
	Hooks            HooksPtrInput           `pulumi:"hooks"`
	Hostname         pulumi.StringPtrInput   `pulumi:"hostname"`
	InstallFlags     pulumi.StringArrayInput `pulumi:"installFlags"`
	K0sBinaryPath    pulumi.StringPtrInput   `pulumi:"k0sBinaryPath"`
	Localhost        LocalhostPtrInput       `pulumi:"localhost"`
	Os               pulumi.StringPtrInput   `pulumi:"os"`
	PrivateAddress   pulumi.StringPtrInput   `pulumi:"privateAddress"`
	PrivateInterface pulumi.StringPtrInput   `pulumi:"privateInterface"`
	Role             pulumi.StringInput      `pulumi:"role"`
	Ssh              SSHPtrInput             `pulumi:"ssh"`
	UploadBinary     pulumi.BoolPtrInput     `pulumi:"uploadBinary"`
	WinRM            WinRMPtrInput           `pulumi:"winRM"`
}

func (HostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Host)(nil)).Elem()
}

func (i HostArgs) ToHostOutput() HostOutput {
	return i.ToHostOutputWithContext(context.Background())
}

func (i HostArgs) ToHostOutputWithContext(ctx context.Context) HostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostOutput)
}

// HostArrayInput is an input type that accepts HostArray and HostArrayOutput values.
// You can construct a concrete instance of `HostArrayInput` via:
//
//          HostArray{ HostArgs{...} }
type HostArrayInput interface {
	pulumi.Input

	ToHostArrayOutput() HostArrayOutput
	ToHostArrayOutputWithContext(context.Context) HostArrayOutput
}

type HostArray []HostInput

func (HostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Host)(nil)).Elem()
}

func (i HostArray) ToHostArrayOutput() HostArrayOutput {
	return i.ToHostArrayOutputWithContext(context.Background())
}

func (i HostArray) ToHostArrayOutputWithContext(ctx context.Context) HostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostArrayOutput)
}

type HostOutput struct{ *pulumi.OutputState }

func (HostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Host)(nil)).Elem()
}

func (o HostOutput) ToHostOutput() HostOutput {
	return o
}

func (o HostOutput) ToHostOutputWithContext(ctx context.Context) HostOutput {
	return o
}

func (o HostOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v Host) map[string]string { return v.Environment }).(pulumi.StringMapOutput)
}

func (o HostOutput) Files() UploadFileArrayOutput {
	return o.ApplyT(func(v Host) []UploadFile { return v.Files }).(UploadFileArrayOutput)
}

func (o HostOutput) Hooks() HooksPtrOutput {
	return o.ApplyT(func(v Host) *Hooks { return v.Hooks }).(HooksPtrOutput)
}

func (o HostOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Host) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

func (o HostOutput) InstallFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Host) []string { return v.InstallFlags }).(pulumi.StringArrayOutput)
}

func (o HostOutput) K0sBinaryPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Host) *string { return v.K0sBinaryPath }).(pulumi.StringPtrOutput)
}

func (o HostOutput) Localhost() LocalhostPtrOutput {
	return o.ApplyT(func(v Host) *Localhost { return v.Localhost }).(LocalhostPtrOutput)
}

func (o HostOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Host) *string { return v.Os }).(pulumi.StringPtrOutput)
}

func (o HostOutput) PrivateAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Host) *string { return v.PrivateAddress }).(pulumi.StringPtrOutput)
}

func (o HostOutput) PrivateInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Host) *string { return v.PrivateInterface }).(pulumi.StringPtrOutput)
}

func (o HostOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v Host) string { return v.Role }).(pulumi.StringOutput)
}

func (o HostOutput) Ssh() SSHPtrOutput {
	return o.ApplyT(func(v Host) *SSH { return v.Ssh }).(SSHPtrOutput)
}

func (o HostOutput) UploadBinary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Host) *bool { return v.UploadBinary }).(pulumi.BoolPtrOutput)
}

func (o HostOutput) WinRM() WinRMPtrOutput {
	return o.ApplyT(func(v Host) *WinRM { return v.WinRM }).(WinRMPtrOutput)
}

type HostArrayOutput struct{ *pulumi.OutputState }

func (HostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Host)(nil)).Elem()
}

func (o HostArrayOutput) ToHostArrayOutput() HostArrayOutput {
	return o
}

func (o HostArrayOutput) ToHostArrayOutputWithContext(ctx context.Context) HostArrayOutput {
	return o
}

func (o HostArrayOutput) Index(i pulumi.IntInput) HostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Host {
		return vs[0].([]Host)[vs[1].(int)]
	}).(HostOutput)
}

type Images struct {
	Calico              *ImagesCalico     `pulumi:"calico"`
	Coredns             *ContainerImage   `pulumi:"coredns"`
	Default_pull_policy *string           `pulumi:"default_pull_policy"`
	Konnectivity        *ContainerImage   `pulumi:"konnectivity"`
	Kubeproxy           *ContainerImage   `pulumi:"kubeproxy"`
	Kuberouter          *ImagesKubeRouter `pulumi:"kuberouter"`
	Metricsserver       *ContainerImage   `pulumi:"metricsserver"`
}

// ImagesInput is an input type that accepts ImagesArgs and ImagesOutput values.
// You can construct a concrete instance of `ImagesInput` via:
//
//          ImagesArgs{...}
type ImagesInput interface {
	pulumi.Input

	ToImagesOutput() ImagesOutput
	ToImagesOutputWithContext(context.Context) ImagesOutput
}

type ImagesArgs struct {
	Calico              ImagesCalicoPtrInput     `pulumi:"calico"`
	Coredns             ContainerImagePtrInput   `pulumi:"coredns"`
	Default_pull_policy pulumi.StringPtrInput    `pulumi:"default_pull_policy"`
	Konnectivity        ContainerImagePtrInput   `pulumi:"konnectivity"`
	Kubeproxy           ContainerImagePtrInput   `pulumi:"kubeproxy"`
	Kuberouter          ImagesKubeRouterPtrInput `pulumi:"kuberouter"`
	Metricsserver       ContainerImagePtrInput   `pulumi:"metricsserver"`
}

func (ImagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Images)(nil)).Elem()
}

func (i ImagesArgs) ToImagesOutput() ImagesOutput {
	return i.ToImagesOutputWithContext(context.Background())
}

func (i ImagesArgs) ToImagesOutputWithContext(ctx context.Context) ImagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesOutput)
}

func (i ImagesArgs) ToImagesPtrOutput() ImagesPtrOutput {
	return i.ToImagesPtrOutputWithContext(context.Background())
}

func (i ImagesArgs) ToImagesPtrOutputWithContext(ctx context.Context) ImagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesOutput).ToImagesPtrOutputWithContext(ctx)
}

// ImagesPtrInput is an input type that accepts ImagesArgs, ImagesPtr and ImagesPtrOutput values.
// You can construct a concrete instance of `ImagesPtrInput` via:
//
//          ImagesArgs{...}
//
//  or:
//
//          nil
type ImagesPtrInput interface {
	pulumi.Input

	ToImagesPtrOutput() ImagesPtrOutput
	ToImagesPtrOutputWithContext(context.Context) ImagesPtrOutput
}

type imagesPtrType ImagesArgs

func ImagesPtr(v *ImagesArgs) ImagesPtrInput {
	return (*imagesPtrType)(v)
}

func (*imagesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Images)(nil)).Elem()
}

func (i *imagesPtrType) ToImagesPtrOutput() ImagesPtrOutput {
	return i.ToImagesPtrOutputWithContext(context.Background())
}

func (i *imagesPtrType) ToImagesPtrOutputWithContext(ctx context.Context) ImagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesPtrOutput)
}

type ImagesOutput struct{ *pulumi.OutputState }

func (ImagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Images)(nil)).Elem()
}

func (o ImagesOutput) ToImagesOutput() ImagesOutput {
	return o
}

func (o ImagesOutput) ToImagesOutputWithContext(ctx context.Context) ImagesOutput {
	return o
}

func (o ImagesOutput) ToImagesPtrOutput() ImagesPtrOutput {
	return o.ToImagesPtrOutputWithContext(context.Background())
}

func (o ImagesOutput) ToImagesPtrOutputWithContext(ctx context.Context) ImagesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Images) *Images {
		return &v
	}).(ImagesPtrOutput)
}

func (o ImagesOutput) Calico() ImagesCalicoPtrOutput {
	return o.ApplyT(func(v Images) *ImagesCalico { return v.Calico }).(ImagesCalicoPtrOutput)
}

func (o ImagesOutput) Coredns() ContainerImagePtrOutput {
	return o.ApplyT(func(v Images) *ContainerImage { return v.Coredns }).(ContainerImagePtrOutput)
}

func (o ImagesOutput) Default_pull_policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Images) *string { return v.Default_pull_policy }).(pulumi.StringPtrOutput)
}

func (o ImagesOutput) Konnectivity() ContainerImagePtrOutput {
	return o.ApplyT(func(v Images) *ContainerImage { return v.Konnectivity }).(ContainerImagePtrOutput)
}

func (o ImagesOutput) Kubeproxy() ContainerImagePtrOutput {
	return o.ApplyT(func(v Images) *ContainerImage { return v.Kubeproxy }).(ContainerImagePtrOutput)
}

func (o ImagesOutput) Kuberouter() ImagesKubeRouterPtrOutput {
	return o.ApplyT(func(v Images) *ImagesKubeRouter { return v.Kuberouter }).(ImagesKubeRouterPtrOutput)
}

func (o ImagesOutput) Metricsserver() ContainerImagePtrOutput {
	return o.ApplyT(func(v Images) *ContainerImage { return v.Metricsserver }).(ContainerImagePtrOutput)
}

type ImagesPtrOutput struct{ *pulumi.OutputState }

func (ImagesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Images)(nil)).Elem()
}

func (o ImagesPtrOutput) ToImagesPtrOutput() ImagesPtrOutput {
	return o
}

func (o ImagesPtrOutput) ToImagesPtrOutputWithContext(ctx context.Context) ImagesPtrOutput {
	return o
}

func (o ImagesPtrOutput) Elem() ImagesOutput {
	return o.ApplyT(func(v *Images) Images {
		if v != nil {
			return *v
		}
		var ret Images
		return ret
	}).(ImagesOutput)
}

func (o ImagesPtrOutput) Calico() ImagesCalicoPtrOutput {
	return o.ApplyT(func(v *Images) *ImagesCalico {
		if v == nil {
			return nil
		}
		return v.Calico
	}).(ImagesCalicoPtrOutput)
}

func (o ImagesPtrOutput) Coredns() ContainerImagePtrOutput {
	return o.ApplyT(func(v *Images) *ContainerImage {
		if v == nil {
			return nil
		}
		return v.Coredns
	}).(ContainerImagePtrOutput)
}

func (o ImagesPtrOutput) Default_pull_policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Images) *string {
		if v == nil {
			return nil
		}
		return v.Default_pull_policy
	}).(pulumi.StringPtrOutput)
}

func (o ImagesPtrOutput) Konnectivity() ContainerImagePtrOutput {
	return o.ApplyT(func(v *Images) *ContainerImage {
		if v == nil {
			return nil
		}
		return v.Konnectivity
	}).(ContainerImagePtrOutput)
}

func (o ImagesPtrOutput) Kubeproxy() ContainerImagePtrOutput {
	return o.ApplyT(func(v *Images) *ContainerImage {
		if v == nil {
			return nil
		}
		return v.Kubeproxy
	}).(ContainerImagePtrOutput)
}

func (o ImagesPtrOutput) Kuberouter() ImagesKubeRouterPtrOutput {
	return o.ApplyT(func(v *Images) *ImagesKubeRouter {
		if v == nil {
			return nil
		}
		return v.Kuberouter
	}).(ImagesKubeRouterPtrOutput)
}

func (o ImagesPtrOutput) Metricsserver() ContainerImagePtrOutput {
	return o.ApplyT(func(v *Images) *ContainerImage {
		if v == nil {
			return nil
		}
		return v.Metricsserver
	}).(ContainerImagePtrOutput)
}

type ImagesCalico struct {
	Cni             *ContainerImage `pulumi:"cni"`
	Kubecontrollers *ContainerImage `pulumi:"kubecontrollers"`
	Node            *ContainerImage `pulumi:"node"`
}

// ImagesCalicoInput is an input type that accepts ImagesCalicoArgs and ImagesCalicoOutput values.
// You can construct a concrete instance of `ImagesCalicoInput` via:
//
//          ImagesCalicoArgs{...}
type ImagesCalicoInput interface {
	pulumi.Input

	ToImagesCalicoOutput() ImagesCalicoOutput
	ToImagesCalicoOutputWithContext(context.Context) ImagesCalicoOutput
}

type ImagesCalicoArgs struct {
	Cni             ContainerImagePtrInput `pulumi:"cni"`
	Kubecontrollers ContainerImagePtrInput `pulumi:"kubecontrollers"`
	Node            ContainerImagePtrInput `pulumi:"node"`
}

func (ImagesCalicoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesCalico)(nil)).Elem()
}

func (i ImagesCalicoArgs) ToImagesCalicoOutput() ImagesCalicoOutput {
	return i.ToImagesCalicoOutputWithContext(context.Background())
}

func (i ImagesCalicoArgs) ToImagesCalicoOutputWithContext(ctx context.Context) ImagesCalicoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesCalicoOutput)
}

func (i ImagesCalicoArgs) ToImagesCalicoPtrOutput() ImagesCalicoPtrOutput {
	return i.ToImagesCalicoPtrOutputWithContext(context.Background())
}

func (i ImagesCalicoArgs) ToImagesCalicoPtrOutputWithContext(ctx context.Context) ImagesCalicoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesCalicoOutput).ToImagesCalicoPtrOutputWithContext(ctx)
}

// ImagesCalicoPtrInput is an input type that accepts ImagesCalicoArgs, ImagesCalicoPtr and ImagesCalicoPtrOutput values.
// You can construct a concrete instance of `ImagesCalicoPtrInput` via:
//
//          ImagesCalicoArgs{...}
//
//  or:
//
//          nil
type ImagesCalicoPtrInput interface {
	pulumi.Input

	ToImagesCalicoPtrOutput() ImagesCalicoPtrOutput
	ToImagesCalicoPtrOutputWithContext(context.Context) ImagesCalicoPtrOutput
}

type imagesCalicoPtrType ImagesCalicoArgs

func ImagesCalicoPtr(v *ImagesCalicoArgs) ImagesCalicoPtrInput {
	return (*imagesCalicoPtrType)(v)
}

func (*imagesCalicoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagesCalico)(nil)).Elem()
}

func (i *imagesCalicoPtrType) ToImagesCalicoPtrOutput() ImagesCalicoPtrOutput {
	return i.ToImagesCalicoPtrOutputWithContext(context.Background())
}

func (i *imagesCalicoPtrType) ToImagesCalicoPtrOutputWithContext(ctx context.Context) ImagesCalicoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesCalicoPtrOutput)
}

type ImagesCalicoOutput struct{ *pulumi.OutputState }

func (ImagesCalicoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesCalico)(nil)).Elem()
}

func (o ImagesCalicoOutput) ToImagesCalicoOutput() ImagesCalicoOutput {
	return o
}

func (o ImagesCalicoOutput) ToImagesCalicoOutputWithContext(ctx context.Context) ImagesCalicoOutput {
	return o
}

func (o ImagesCalicoOutput) ToImagesCalicoPtrOutput() ImagesCalicoPtrOutput {
	return o.ToImagesCalicoPtrOutputWithContext(context.Background())
}

func (o ImagesCalicoOutput) ToImagesCalicoPtrOutputWithContext(ctx context.Context) ImagesCalicoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagesCalico) *ImagesCalico {
		return &v
	}).(ImagesCalicoPtrOutput)
}

func (o ImagesCalicoOutput) Cni() ContainerImagePtrOutput {
	return o.ApplyT(func(v ImagesCalico) *ContainerImage { return v.Cni }).(ContainerImagePtrOutput)
}

func (o ImagesCalicoOutput) Kubecontrollers() ContainerImagePtrOutput {
	return o.ApplyT(func(v ImagesCalico) *ContainerImage { return v.Kubecontrollers }).(ContainerImagePtrOutput)
}

func (o ImagesCalicoOutput) Node() ContainerImagePtrOutput {
	return o.ApplyT(func(v ImagesCalico) *ContainerImage { return v.Node }).(ContainerImagePtrOutput)
}

type ImagesCalicoPtrOutput struct{ *pulumi.OutputState }

func (ImagesCalicoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagesCalico)(nil)).Elem()
}

func (o ImagesCalicoPtrOutput) ToImagesCalicoPtrOutput() ImagesCalicoPtrOutput {
	return o
}

func (o ImagesCalicoPtrOutput) ToImagesCalicoPtrOutputWithContext(ctx context.Context) ImagesCalicoPtrOutput {
	return o
}

func (o ImagesCalicoPtrOutput) Elem() ImagesCalicoOutput {
	return o.ApplyT(func(v *ImagesCalico) ImagesCalico {
		if v != nil {
			return *v
		}
		var ret ImagesCalico
		return ret
	}).(ImagesCalicoOutput)
}

func (o ImagesCalicoPtrOutput) Cni() ContainerImagePtrOutput {
	return o.ApplyT(func(v *ImagesCalico) *ContainerImage {
		if v == nil {
			return nil
		}
		return v.Cni
	}).(ContainerImagePtrOutput)
}

func (o ImagesCalicoPtrOutput) Kubecontrollers() ContainerImagePtrOutput {
	return o.ApplyT(func(v *ImagesCalico) *ContainerImage {
		if v == nil {
			return nil
		}
		return v.Kubecontrollers
	}).(ContainerImagePtrOutput)
}

func (o ImagesCalicoPtrOutput) Node() ContainerImagePtrOutput {
	return o.ApplyT(func(v *ImagesCalico) *ContainerImage {
		if v == nil {
			return nil
		}
		return v.Node
	}).(ContainerImagePtrOutput)
}

type ImagesKubeRouter struct {
	Cni          *ContainerImage `pulumi:"cni"`
	CniInstaller *ContainerImage `pulumi:"cniInstaller"`
}

// ImagesKubeRouterInput is an input type that accepts ImagesKubeRouterArgs and ImagesKubeRouterOutput values.
// You can construct a concrete instance of `ImagesKubeRouterInput` via:
//
//          ImagesKubeRouterArgs{...}
type ImagesKubeRouterInput interface {
	pulumi.Input

	ToImagesKubeRouterOutput() ImagesKubeRouterOutput
	ToImagesKubeRouterOutputWithContext(context.Context) ImagesKubeRouterOutput
}

type ImagesKubeRouterArgs struct {
	Cni          ContainerImagePtrInput `pulumi:"cni"`
	CniInstaller ContainerImagePtrInput `pulumi:"cniInstaller"`
}

func (ImagesKubeRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesKubeRouter)(nil)).Elem()
}

func (i ImagesKubeRouterArgs) ToImagesKubeRouterOutput() ImagesKubeRouterOutput {
	return i.ToImagesKubeRouterOutputWithContext(context.Background())
}

func (i ImagesKubeRouterArgs) ToImagesKubeRouterOutputWithContext(ctx context.Context) ImagesKubeRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesKubeRouterOutput)
}

func (i ImagesKubeRouterArgs) ToImagesKubeRouterPtrOutput() ImagesKubeRouterPtrOutput {
	return i.ToImagesKubeRouterPtrOutputWithContext(context.Background())
}

func (i ImagesKubeRouterArgs) ToImagesKubeRouterPtrOutputWithContext(ctx context.Context) ImagesKubeRouterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesKubeRouterOutput).ToImagesKubeRouterPtrOutputWithContext(ctx)
}

// ImagesKubeRouterPtrInput is an input type that accepts ImagesKubeRouterArgs, ImagesKubeRouterPtr and ImagesKubeRouterPtrOutput values.
// You can construct a concrete instance of `ImagesKubeRouterPtrInput` via:
//
//          ImagesKubeRouterArgs{...}
//
//  or:
//
//          nil
type ImagesKubeRouterPtrInput interface {
	pulumi.Input

	ToImagesKubeRouterPtrOutput() ImagesKubeRouterPtrOutput
	ToImagesKubeRouterPtrOutputWithContext(context.Context) ImagesKubeRouterPtrOutput
}

type imagesKubeRouterPtrType ImagesKubeRouterArgs

func ImagesKubeRouterPtr(v *ImagesKubeRouterArgs) ImagesKubeRouterPtrInput {
	return (*imagesKubeRouterPtrType)(v)
}

func (*imagesKubeRouterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagesKubeRouter)(nil)).Elem()
}

func (i *imagesKubeRouterPtrType) ToImagesKubeRouterPtrOutput() ImagesKubeRouterPtrOutput {
	return i.ToImagesKubeRouterPtrOutputWithContext(context.Background())
}

func (i *imagesKubeRouterPtrType) ToImagesKubeRouterPtrOutputWithContext(ctx context.Context) ImagesKubeRouterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesKubeRouterPtrOutput)
}

type ImagesKubeRouterOutput struct{ *pulumi.OutputState }

func (ImagesKubeRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesKubeRouter)(nil)).Elem()
}

func (o ImagesKubeRouterOutput) ToImagesKubeRouterOutput() ImagesKubeRouterOutput {
	return o
}

func (o ImagesKubeRouterOutput) ToImagesKubeRouterOutputWithContext(ctx context.Context) ImagesKubeRouterOutput {
	return o
}

func (o ImagesKubeRouterOutput) ToImagesKubeRouterPtrOutput() ImagesKubeRouterPtrOutput {
	return o.ToImagesKubeRouterPtrOutputWithContext(context.Background())
}

func (o ImagesKubeRouterOutput) ToImagesKubeRouterPtrOutputWithContext(ctx context.Context) ImagesKubeRouterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagesKubeRouter) *ImagesKubeRouter {
		return &v
	}).(ImagesKubeRouterPtrOutput)
}

func (o ImagesKubeRouterOutput) Cni() ContainerImagePtrOutput {
	return o.ApplyT(func(v ImagesKubeRouter) *ContainerImage { return v.Cni }).(ContainerImagePtrOutput)
}

func (o ImagesKubeRouterOutput) CniInstaller() ContainerImagePtrOutput {
	return o.ApplyT(func(v ImagesKubeRouter) *ContainerImage { return v.CniInstaller }).(ContainerImagePtrOutput)
}

type ImagesKubeRouterPtrOutput struct{ *pulumi.OutputState }

func (ImagesKubeRouterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagesKubeRouter)(nil)).Elem()
}

func (o ImagesKubeRouterPtrOutput) ToImagesKubeRouterPtrOutput() ImagesKubeRouterPtrOutput {
	return o
}

func (o ImagesKubeRouterPtrOutput) ToImagesKubeRouterPtrOutputWithContext(ctx context.Context) ImagesKubeRouterPtrOutput {
	return o
}

func (o ImagesKubeRouterPtrOutput) Elem() ImagesKubeRouterOutput {
	return o.ApplyT(func(v *ImagesKubeRouter) ImagesKubeRouter {
		if v != nil {
			return *v
		}
		var ret ImagesKubeRouter
		return ret
	}).(ImagesKubeRouterOutput)
}

func (o ImagesKubeRouterPtrOutput) Cni() ContainerImagePtrOutput {
	return o.ApplyT(func(v *ImagesKubeRouter) *ContainerImage {
		if v == nil {
			return nil
		}
		return v.Cni
	}).(ContainerImagePtrOutput)
}

func (o ImagesKubeRouterPtrOutput) CniInstaller() ContainerImagePtrOutput {
	return o.ApplyT(func(v *ImagesKubeRouter) *ContainerImage {
		if v == nil {
			return nil
		}
		return v.CniInstaller
	}).(ContainerImagePtrOutput)
}

type InstallConfig struct {
	Users *InstallConfigUsers `pulumi:"users"`
}

// InstallConfigInput is an input type that accepts InstallConfigArgs and InstallConfigOutput values.
// You can construct a concrete instance of `InstallConfigInput` via:
//
//          InstallConfigArgs{...}
type InstallConfigInput interface {
	pulumi.Input

	ToInstallConfigOutput() InstallConfigOutput
	ToInstallConfigOutputWithContext(context.Context) InstallConfigOutput
}

type InstallConfigArgs struct {
	Users InstallConfigUsersPtrInput `pulumi:"users"`
}

func (InstallConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallConfig)(nil)).Elem()
}

func (i InstallConfigArgs) ToInstallConfigOutput() InstallConfigOutput {
	return i.ToInstallConfigOutputWithContext(context.Background())
}

func (i InstallConfigArgs) ToInstallConfigOutputWithContext(ctx context.Context) InstallConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallConfigOutput)
}

func (i InstallConfigArgs) ToInstallConfigPtrOutput() InstallConfigPtrOutput {
	return i.ToInstallConfigPtrOutputWithContext(context.Background())
}

func (i InstallConfigArgs) ToInstallConfigPtrOutputWithContext(ctx context.Context) InstallConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallConfigOutput).ToInstallConfigPtrOutputWithContext(ctx)
}

// InstallConfigPtrInput is an input type that accepts InstallConfigArgs, InstallConfigPtr and InstallConfigPtrOutput values.
// You can construct a concrete instance of `InstallConfigPtrInput` via:
//
//          InstallConfigArgs{...}
//
//  or:
//
//          nil
type InstallConfigPtrInput interface {
	pulumi.Input

	ToInstallConfigPtrOutput() InstallConfigPtrOutput
	ToInstallConfigPtrOutputWithContext(context.Context) InstallConfigPtrOutput
}

type installConfigPtrType InstallConfigArgs

func InstallConfigPtr(v *InstallConfigArgs) InstallConfigPtrInput {
	return (*installConfigPtrType)(v)
}

func (*installConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstallConfig)(nil)).Elem()
}

func (i *installConfigPtrType) ToInstallConfigPtrOutput() InstallConfigPtrOutput {
	return i.ToInstallConfigPtrOutputWithContext(context.Background())
}

func (i *installConfigPtrType) ToInstallConfigPtrOutputWithContext(ctx context.Context) InstallConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallConfigPtrOutput)
}

type InstallConfigOutput struct{ *pulumi.OutputState }

func (InstallConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallConfig)(nil)).Elem()
}

func (o InstallConfigOutput) ToInstallConfigOutput() InstallConfigOutput {
	return o
}

func (o InstallConfigOutput) ToInstallConfigOutputWithContext(ctx context.Context) InstallConfigOutput {
	return o
}

func (o InstallConfigOutput) ToInstallConfigPtrOutput() InstallConfigPtrOutput {
	return o.ToInstallConfigPtrOutputWithContext(context.Background())
}

func (o InstallConfigOutput) ToInstallConfigPtrOutputWithContext(ctx context.Context) InstallConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstallConfig) *InstallConfig {
		return &v
	}).(InstallConfigPtrOutput)
}

func (o InstallConfigOutput) Users() InstallConfigUsersPtrOutput {
	return o.ApplyT(func(v InstallConfig) *InstallConfigUsers { return v.Users }).(InstallConfigUsersPtrOutput)
}

type InstallConfigPtrOutput struct{ *pulumi.OutputState }

func (InstallConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstallConfig)(nil)).Elem()
}

func (o InstallConfigPtrOutput) ToInstallConfigPtrOutput() InstallConfigPtrOutput {
	return o
}

func (o InstallConfigPtrOutput) ToInstallConfigPtrOutputWithContext(ctx context.Context) InstallConfigPtrOutput {
	return o
}

func (o InstallConfigPtrOutput) Elem() InstallConfigOutput {
	return o.ApplyT(func(v *InstallConfig) InstallConfig {
		if v != nil {
			return *v
		}
		var ret InstallConfig
		return ret
	}).(InstallConfigOutput)
}

func (o InstallConfigPtrOutput) Users() InstallConfigUsersPtrOutput {
	return o.ApplyT(func(v *InstallConfig) *InstallConfigUsers {
		if v == nil {
			return nil
		}
		return v.Users
	}).(InstallConfigUsersPtrOutput)
}

type InstallConfigUsers struct {
	EtcdUser          *string `pulumi:"etcdUser"`
	KineUser          *string `pulumi:"kineUser"`
	KonnectivityUser  *string `pulumi:"konnectivityUser"`
	KubeAPIserverUser *string `pulumi:"kubeAPIserverUser"`
	KubeSchedulerUser *string `pulumi:"kubeSchedulerUser"`
}

// InstallConfigUsersInput is an input type that accepts InstallConfigUsersArgs and InstallConfigUsersOutput values.
// You can construct a concrete instance of `InstallConfigUsersInput` via:
//
//          InstallConfigUsersArgs{...}
type InstallConfigUsersInput interface {
	pulumi.Input

	ToInstallConfigUsersOutput() InstallConfigUsersOutput
	ToInstallConfigUsersOutputWithContext(context.Context) InstallConfigUsersOutput
}

type InstallConfigUsersArgs struct {
	EtcdUser          pulumi.StringPtrInput `pulumi:"etcdUser"`
	KineUser          pulumi.StringPtrInput `pulumi:"kineUser"`
	KonnectivityUser  pulumi.StringPtrInput `pulumi:"konnectivityUser"`
	KubeAPIserverUser pulumi.StringPtrInput `pulumi:"kubeAPIserverUser"`
	KubeSchedulerUser pulumi.StringPtrInput `pulumi:"kubeSchedulerUser"`
}

func (InstallConfigUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallConfigUsers)(nil)).Elem()
}

func (i InstallConfigUsersArgs) ToInstallConfigUsersOutput() InstallConfigUsersOutput {
	return i.ToInstallConfigUsersOutputWithContext(context.Background())
}

func (i InstallConfigUsersArgs) ToInstallConfigUsersOutputWithContext(ctx context.Context) InstallConfigUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallConfigUsersOutput)
}

func (i InstallConfigUsersArgs) ToInstallConfigUsersPtrOutput() InstallConfigUsersPtrOutput {
	return i.ToInstallConfigUsersPtrOutputWithContext(context.Background())
}

func (i InstallConfigUsersArgs) ToInstallConfigUsersPtrOutputWithContext(ctx context.Context) InstallConfigUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallConfigUsersOutput).ToInstallConfigUsersPtrOutputWithContext(ctx)
}

// InstallConfigUsersPtrInput is an input type that accepts InstallConfigUsersArgs, InstallConfigUsersPtr and InstallConfigUsersPtrOutput values.
// You can construct a concrete instance of `InstallConfigUsersPtrInput` via:
//
//          InstallConfigUsersArgs{...}
//
//  or:
//
//          nil
type InstallConfigUsersPtrInput interface {
	pulumi.Input

	ToInstallConfigUsersPtrOutput() InstallConfigUsersPtrOutput
	ToInstallConfigUsersPtrOutputWithContext(context.Context) InstallConfigUsersPtrOutput
}

type installConfigUsersPtrType InstallConfigUsersArgs

func InstallConfigUsersPtr(v *InstallConfigUsersArgs) InstallConfigUsersPtrInput {
	return (*installConfigUsersPtrType)(v)
}

func (*installConfigUsersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstallConfigUsers)(nil)).Elem()
}

func (i *installConfigUsersPtrType) ToInstallConfigUsersPtrOutput() InstallConfigUsersPtrOutput {
	return i.ToInstallConfigUsersPtrOutputWithContext(context.Background())
}

func (i *installConfigUsersPtrType) ToInstallConfigUsersPtrOutputWithContext(ctx context.Context) InstallConfigUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallConfigUsersPtrOutput)
}

type InstallConfigUsersOutput struct{ *pulumi.OutputState }

func (InstallConfigUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallConfigUsers)(nil)).Elem()
}

func (o InstallConfigUsersOutput) ToInstallConfigUsersOutput() InstallConfigUsersOutput {
	return o
}

func (o InstallConfigUsersOutput) ToInstallConfigUsersOutputWithContext(ctx context.Context) InstallConfigUsersOutput {
	return o
}

func (o InstallConfigUsersOutput) ToInstallConfigUsersPtrOutput() InstallConfigUsersPtrOutput {
	return o.ToInstallConfigUsersPtrOutputWithContext(context.Background())
}

func (o InstallConfigUsersOutput) ToInstallConfigUsersPtrOutputWithContext(ctx context.Context) InstallConfigUsersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstallConfigUsers) *InstallConfigUsers {
		return &v
	}).(InstallConfigUsersPtrOutput)
}

func (o InstallConfigUsersOutput) EtcdUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstallConfigUsers) *string { return v.EtcdUser }).(pulumi.StringPtrOutput)
}

func (o InstallConfigUsersOutput) KineUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstallConfigUsers) *string { return v.KineUser }).(pulumi.StringPtrOutput)
}

func (o InstallConfigUsersOutput) KonnectivityUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstallConfigUsers) *string { return v.KonnectivityUser }).(pulumi.StringPtrOutput)
}

func (o InstallConfigUsersOutput) KubeAPIserverUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstallConfigUsers) *string { return v.KubeAPIserverUser }).(pulumi.StringPtrOutput)
}

func (o InstallConfigUsersOutput) KubeSchedulerUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstallConfigUsers) *string { return v.KubeSchedulerUser }).(pulumi.StringPtrOutput)
}

type InstallConfigUsersPtrOutput struct{ *pulumi.OutputState }

func (InstallConfigUsersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstallConfigUsers)(nil)).Elem()
}

func (o InstallConfigUsersPtrOutput) ToInstallConfigUsersPtrOutput() InstallConfigUsersPtrOutput {
	return o
}

func (o InstallConfigUsersPtrOutput) ToInstallConfigUsersPtrOutputWithContext(ctx context.Context) InstallConfigUsersPtrOutput {
	return o
}

func (o InstallConfigUsersPtrOutput) Elem() InstallConfigUsersOutput {
	return o.ApplyT(func(v *InstallConfigUsers) InstallConfigUsers {
		if v != nil {
			return *v
		}
		var ret InstallConfigUsers
		return ret
	}).(InstallConfigUsersOutput)
}

func (o InstallConfigUsersPtrOutput) EtcdUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstallConfigUsers) *string {
		if v == nil {
			return nil
		}
		return v.EtcdUser
	}).(pulumi.StringPtrOutput)
}

func (o InstallConfigUsersPtrOutput) KineUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstallConfigUsers) *string {
		if v == nil {
			return nil
		}
		return v.KineUser
	}).(pulumi.StringPtrOutput)
}

func (o InstallConfigUsersPtrOutput) KonnectivityUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstallConfigUsers) *string {
		if v == nil {
			return nil
		}
		return v.KonnectivityUser
	}).(pulumi.StringPtrOutput)
}

func (o InstallConfigUsersPtrOutput) KubeAPIserverUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstallConfigUsers) *string {
		if v == nil {
			return nil
		}
		return v.KubeAPIserverUser
	}).(pulumi.StringPtrOutput)
}

func (o InstallConfigUsersPtrOutput) KubeSchedulerUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstallConfigUsers) *string {
		if v == nil {
			return nil
		}
		return v.KubeSchedulerUser
	}).(pulumi.StringPtrOutput)
}

type K0s struct {
	Config        *Config `pulumi:"config"`
	DynamicConfig *bool   `pulumi:"dynamicConfig"`
	Version       *string `pulumi:"version"`
}

// K0sInput is an input type that accepts K0sArgs and K0sOutput values.
// You can construct a concrete instance of `K0sInput` via:
//
//          K0sArgs{...}
type K0sInput interface {
	pulumi.Input

	ToK0sOutput() K0sOutput
	ToK0sOutputWithContext(context.Context) K0sOutput
}

type K0sArgs struct {
	Config        ConfigPtrInput        `pulumi:"config"`
	DynamicConfig pulumi.BoolPtrInput   `pulumi:"dynamicConfig"`
	Version       pulumi.StringPtrInput `pulumi:"version"`
}

func (K0sArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K0s)(nil)).Elem()
}

func (i K0sArgs) ToK0sOutput() K0sOutput {
	return i.ToK0sOutputWithContext(context.Background())
}

func (i K0sArgs) ToK0sOutputWithContext(ctx context.Context) K0sOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K0sOutput)
}

func (i K0sArgs) ToK0sPtrOutput() K0sPtrOutput {
	return i.ToK0sPtrOutputWithContext(context.Background())
}

func (i K0sArgs) ToK0sPtrOutputWithContext(ctx context.Context) K0sPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K0sOutput).ToK0sPtrOutputWithContext(ctx)
}

// K0sPtrInput is an input type that accepts K0sArgs, K0sPtr and K0sPtrOutput values.
// You can construct a concrete instance of `K0sPtrInput` via:
//
//          K0sArgs{...}
//
//  or:
//
//          nil
type K0sPtrInput interface {
	pulumi.Input

	ToK0sPtrOutput() K0sPtrOutput
	ToK0sPtrOutputWithContext(context.Context) K0sPtrOutput
}

type k0sPtrType K0sArgs

func K0sPtr(v *K0sArgs) K0sPtrInput {
	return (*k0sPtrType)(v)
}

func (*k0sPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K0s)(nil)).Elem()
}

func (i *k0sPtrType) ToK0sPtrOutput() K0sPtrOutput {
	return i.ToK0sPtrOutputWithContext(context.Background())
}

func (i *k0sPtrType) ToK0sPtrOutputWithContext(ctx context.Context) K0sPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K0sPtrOutput)
}

type K0sOutput struct{ *pulumi.OutputState }

func (K0sOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K0s)(nil)).Elem()
}

func (o K0sOutput) ToK0sOutput() K0sOutput {
	return o
}

func (o K0sOutput) ToK0sOutputWithContext(ctx context.Context) K0sOutput {
	return o
}

func (o K0sOutput) ToK0sPtrOutput() K0sPtrOutput {
	return o.ToK0sPtrOutputWithContext(context.Background())
}

func (o K0sOutput) ToK0sPtrOutputWithContext(ctx context.Context) K0sPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K0s) *K0s {
		return &v
	}).(K0sPtrOutput)
}

func (o K0sOutput) Config() ConfigPtrOutput {
	return o.ApplyT(func(v K0s) *Config { return v.Config }).(ConfigPtrOutput)
}

func (o K0sOutput) DynamicConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K0s) *bool { return v.DynamicConfig }).(pulumi.BoolPtrOutput)
}

func (o K0sOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K0s) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type K0sPtrOutput struct{ *pulumi.OutputState }

func (K0sPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K0s)(nil)).Elem()
}

func (o K0sPtrOutput) ToK0sPtrOutput() K0sPtrOutput {
	return o
}

func (o K0sPtrOutput) ToK0sPtrOutputWithContext(ctx context.Context) K0sPtrOutput {
	return o
}

func (o K0sPtrOutput) Elem() K0sOutput {
	return o.ApplyT(func(v *K0s) K0s {
		if v != nil {
			return *v
		}
		var ret K0s
		return ret
	}).(K0sOutput)
}

func (o K0sPtrOutput) Config() ConfigPtrOutput {
	return o.ApplyT(func(v *K0s) *Config {
		if v == nil {
			return nil
		}
		return v.Config
	}).(ConfigPtrOutput)
}

func (o K0sPtrOutput) DynamicConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K0s) *bool {
		if v == nil {
			return nil
		}
		return v.DynamicConfig
	}).(pulumi.BoolPtrOutput)
}

func (o K0sPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K0s) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type K0sSpec struct {
	Api               *API               `pulumi:"api"`
	Images            *Images            `pulumi:"images"`
	InstallConfig     *InstallConfig     `pulumi:"installConfig"`
	Konnectivity      *Konnectivity      `pulumi:"konnectivity"`
	Network           *Network           `pulumi:"network"`
	PodSecurityPolicy *PodSecurityPolicy `pulumi:"podSecurityPolicy"`
	Storage           *Storage           `pulumi:"storage"`
	Telemetry         *Telemetry         `pulumi:"telemetry"`
}

// K0sSpecInput is an input type that accepts K0sSpecArgs and K0sSpecOutput values.
// You can construct a concrete instance of `K0sSpecInput` via:
//
//          K0sSpecArgs{...}
type K0sSpecInput interface {
	pulumi.Input

	ToK0sSpecOutput() K0sSpecOutput
	ToK0sSpecOutputWithContext(context.Context) K0sSpecOutput
}

type K0sSpecArgs struct {
	Api               APIPtrInput               `pulumi:"api"`
	Images            ImagesPtrInput            `pulumi:"images"`
	InstallConfig     InstallConfigPtrInput     `pulumi:"installConfig"`
	Konnectivity      KonnectivityPtrInput      `pulumi:"konnectivity"`
	Network           NetworkPtrInput           `pulumi:"network"`
	PodSecurityPolicy PodSecurityPolicyPtrInput `pulumi:"podSecurityPolicy"`
	Storage           StoragePtrInput           `pulumi:"storage"`
	Telemetry         TelemetryPtrInput         `pulumi:"telemetry"`
}

func (K0sSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K0sSpec)(nil)).Elem()
}

func (i K0sSpecArgs) ToK0sSpecOutput() K0sSpecOutput {
	return i.ToK0sSpecOutputWithContext(context.Background())
}

func (i K0sSpecArgs) ToK0sSpecOutputWithContext(ctx context.Context) K0sSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K0sSpecOutput)
}

func (i K0sSpecArgs) ToK0sSpecPtrOutput() K0sSpecPtrOutput {
	return i.ToK0sSpecPtrOutputWithContext(context.Background())
}

func (i K0sSpecArgs) ToK0sSpecPtrOutputWithContext(ctx context.Context) K0sSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K0sSpecOutput).ToK0sSpecPtrOutputWithContext(ctx)
}

// K0sSpecPtrInput is an input type that accepts K0sSpecArgs, K0sSpecPtr and K0sSpecPtrOutput values.
// You can construct a concrete instance of `K0sSpecPtrInput` via:
//
//          K0sSpecArgs{...}
//
//  or:
//
//          nil
type K0sSpecPtrInput interface {
	pulumi.Input

	ToK0sSpecPtrOutput() K0sSpecPtrOutput
	ToK0sSpecPtrOutputWithContext(context.Context) K0sSpecPtrOutput
}

type k0sSpecPtrType K0sSpecArgs

func K0sSpecPtr(v *K0sSpecArgs) K0sSpecPtrInput {
	return (*k0sSpecPtrType)(v)
}

func (*k0sSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K0sSpec)(nil)).Elem()
}

func (i *k0sSpecPtrType) ToK0sSpecPtrOutput() K0sSpecPtrOutput {
	return i.ToK0sSpecPtrOutputWithContext(context.Background())
}

func (i *k0sSpecPtrType) ToK0sSpecPtrOutputWithContext(ctx context.Context) K0sSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K0sSpecPtrOutput)
}

type K0sSpecOutput struct{ *pulumi.OutputState }

func (K0sSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K0sSpec)(nil)).Elem()
}

func (o K0sSpecOutput) ToK0sSpecOutput() K0sSpecOutput {
	return o
}

func (o K0sSpecOutput) ToK0sSpecOutputWithContext(ctx context.Context) K0sSpecOutput {
	return o
}

func (o K0sSpecOutput) ToK0sSpecPtrOutput() K0sSpecPtrOutput {
	return o.ToK0sSpecPtrOutputWithContext(context.Background())
}

func (o K0sSpecOutput) ToK0sSpecPtrOutputWithContext(ctx context.Context) K0sSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K0sSpec) *K0sSpec {
		return &v
	}).(K0sSpecPtrOutput)
}

func (o K0sSpecOutput) Api() APIPtrOutput {
	return o.ApplyT(func(v K0sSpec) *API { return v.Api }).(APIPtrOutput)
}

func (o K0sSpecOutput) Images() ImagesPtrOutput {
	return o.ApplyT(func(v K0sSpec) *Images { return v.Images }).(ImagesPtrOutput)
}

func (o K0sSpecOutput) InstallConfig() InstallConfigPtrOutput {
	return o.ApplyT(func(v K0sSpec) *InstallConfig { return v.InstallConfig }).(InstallConfigPtrOutput)
}

func (o K0sSpecOutput) Konnectivity() KonnectivityPtrOutput {
	return o.ApplyT(func(v K0sSpec) *Konnectivity { return v.Konnectivity }).(KonnectivityPtrOutput)
}

func (o K0sSpecOutput) Network() NetworkPtrOutput {
	return o.ApplyT(func(v K0sSpec) *Network { return v.Network }).(NetworkPtrOutput)
}

func (o K0sSpecOutput) PodSecurityPolicy() PodSecurityPolicyPtrOutput {
	return o.ApplyT(func(v K0sSpec) *PodSecurityPolicy { return v.PodSecurityPolicy }).(PodSecurityPolicyPtrOutput)
}

func (o K0sSpecOutput) Storage() StoragePtrOutput {
	return o.ApplyT(func(v K0sSpec) *Storage { return v.Storage }).(StoragePtrOutput)
}

func (o K0sSpecOutput) Telemetry() TelemetryPtrOutput {
	return o.ApplyT(func(v K0sSpec) *Telemetry { return v.Telemetry }).(TelemetryPtrOutput)
}

type K0sSpecPtrOutput struct{ *pulumi.OutputState }

func (K0sSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K0sSpec)(nil)).Elem()
}

func (o K0sSpecPtrOutput) ToK0sSpecPtrOutput() K0sSpecPtrOutput {
	return o
}

func (o K0sSpecPtrOutput) ToK0sSpecPtrOutputWithContext(ctx context.Context) K0sSpecPtrOutput {
	return o
}

func (o K0sSpecPtrOutput) Elem() K0sSpecOutput {
	return o.ApplyT(func(v *K0sSpec) K0sSpec {
		if v != nil {
			return *v
		}
		var ret K0sSpec
		return ret
	}).(K0sSpecOutput)
}

func (o K0sSpecPtrOutput) Api() APIPtrOutput {
	return o.ApplyT(func(v *K0sSpec) *API {
		if v == nil {
			return nil
		}
		return v.Api
	}).(APIPtrOutput)
}

func (o K0sSpecPtrOutput) Images() ImagesPtrOutput {
	return o.ApplyT(func(v *K0sSpec) *Images {
		if v == nil {
			return nil
		}
		return v.Images
	}).(ImagesPtrOutput)
}

func (o K0sSpecPtrOutput) InstallConfig() InstallConfigPtrOutput {
	return o.ApplyT(func(v *K0sSpec) *InstallConfig {
		if v == nil {
			return nil
		}
		return v.InstallConfig
	}).(InstallConfigPtrOutput)
}

func (o K0sSpecPtrOutput) Konnectivity() KonnectivityPtrOutput {
	return o.ApplyT(func(v *K0sSpec) *Konnectivity {
		if v == nil {
			return nil
		}
		return v.Konnectivity
	}).(KonnectivityPtrOutput)
}

func (o K0sSpecPtrOutput) Network() NetworkPtrOutput {
	return o.ApplyT(func(v *K0sSpec) *Network {
		if v == nil {
			return nil
		}
		return v.Network
	}).(NetworkPtrOutput)
}

func (o K0sSpecPtrOutput) PodSecurityPolicy() PodSecurityPolicyPtrOutput {
	return o.ApplyT(func(v *K0sSpec) *PodSecurityPolicy {
		if v == nil {
			return nil
		}
		return v.PodSecurityPolicy
	}).(PodSecurityPolicyPtrOutput)
}

func (o K0sSpecPtrOutput) Storage() StoragePtrOutput {
	return o.ApplyT(func(v *K0sSpec) *Storage {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(StoragePtrOutput)
}

func (o K0sSpecPtrOutput) Telemetry() TelemetryPtrOutput {
	return o.ApplyT(func(v *K0sSpec) *Telemetry {
		if v == nil {
			return nil
		}
		return v.Telemetry
	}).(TelemetryPtrOutput)
}

type Konnectivity struct {
	AdminPort *float64 `pulumi:"adminPort"`
	AgentPort *float64 `pulumi:"agentPort"`
}

// KonnectivityInput is an input type that accepts KonnectivityArgs and KonnectivityOutput values.
// You can construct a concrete instance of `KonnectivityInput` via:
//
//          KonnectivityArgs{...}
type KonnectivityInput interface {
	pulumi.Input

	ToKonnectivityOutput() KonnectivityOutput
	ToKonnectivityOutputWithContext(context.Context) KonnectivityOutput
}

type KonnectivityArgs struct {
	AdminPort pulumi.Float64PtrInput `pulumi:"adminPort"`
	AgentPort pulumi.Float64PtrInput `pulumi:"agentPort"`
}

func (KonnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Konnectivity)(nil)).Elem()
}

func (i KonnectivityArgs) ToKonnectivityOutput() KonnectivityOutput {
	return i.ToKonnectivityOutputWithContext(context.Background())
}

func (i KonnectivityArgs) ToKonnectivityOutputWithContext(ctx context.Context) KonnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KonnectivityOutput)
}

func (i KonnectivityArgs) ToKonnectivityPtrOutput() KonnectivityPtrOutput {
	return i.ToKonnectivityPtrOutputWithContext(context.Background())
}

func (i KonnectivityArgs) ToKonnectivityPtrOutputWithContext(ctx context.Context) KonnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KonnectivityOutput).ToKonnectivityPtrOutputWithContext(ctx)
}

// KonnectivityPtrInput is an input type that accepts KonnectivityArgs, KonnectivityPtr and KonnectivityPtrOutput values.
// You can construct a concrete instance of `KonnectivityPtrInput` via:
//
//          KonnectivityArgs{...}
//
//  or:
//
//          nil
type KonnectivityPtrInput interface {
	pulumi.Input

	ToKonnectivityPtrOutput() KonnectivityPtrOutput
	ToKonnectivityPtrOutputWithContext(context.Context) KonnectivityPtrOutput
}

type konnectivityPtrType KonnectivityArgs

func KonnectivityPtr(v *KonnectivityArgs) KonnectivityPtrInput {
	return (*konnectivityPtrType)(v)
}

func (*konnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Konnectivity)(nil)).Elem()
}

func (i *konnectivityPtrType) ToKonnectivityPtrOutput() KonnectivityPtrOutput {
	return i.ToKonnectivityPtrOutputWithContext(context.Background())
}

func (i *konnectivityPtrType) ToKonnectivityPtrOutputWithContext(ctx context.Context) KonnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KonnectivityPtrOutput)
}

type KonnectivityOutput struct{ *pulumi.OutputState }

func (KonnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Konnectivity)(nil)).Elem()
}

func (o KonnectivityOutput) ToKonnectivityOutput() KonnectivityOutput {
	return o
}

func (o KonnectivityOutput) ToKonnectivityOutputWithContext(ctx context.Context) KonnectivityOutput {
	return o
}

func (o KonnectivityOutput) ToKonnectivityPtrOutput() KonnectivityPtrOutput {
	return o.ToKonnectivityPtrOutputWithContext(context.Background())
}

func (o KonnectivityOutput) ToKonnectivityPtrOutputWithContext(ctx context.Context) KonnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Konnectivity) *Konnectivity {
		return &v
	}).(KonnectivityPtrOutput)
}

func (o KonnectivityOutput) AdminPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Konnectivity) *float64 { return v.AdminPort }).(pulumi.Float64PtrOutput)
}

func (o KonnectivityOutput) AgentPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Konnectivity) *float64 { return v.AgentPort }).(pulumi.Float64PtrOutput)
}

type KonnectivityPtrOutput struct{ *pulumi.OutputState }

func (KonnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Konnectivity)(nil)).Elem()
}

func (o KonnectivityPtrOutput) ToKonnectivityPtrOutput() KonnectivityPtrOutput {
	return o
}

func (o KonnectivityPtrOutput) ToKonnectivityPtrOutputWithContext(ctx context.Context) KonnectivityPtrOutput {
	return o
}

func (o KonnectivityPtrOutput) Elem() KonnectivityOutput {
	return o.ApplyT(func(v *Konnectivity) Konnectivity {
		if v != nil {
			return *v
		}
		var ret Konnectivity
		return ret
	}).(KonnectivityOutput)
}

func (o KonnectivityPtrOutput) AdminPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Konnectivity) *float64 {
		if v == nil {
			return nil
		}
		return v.AdminPort
	}).(pulumi.Float64PtrOutput)
}

func (o KonnectivityPtrOutput) AgentPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Konnectivity) *float64 {
		if v == nil {
			return nil
		}
		return v.AgentPort
	}).(pulumi.Float64PtrOutput)
}

type KubeProxy struct {
	Disabled *bool   `pulumi:"disabled"`
	Mode     *string `pulumi:"mode"`
}

// KubeProxyInput is an input type that accepts KubeProxyArgs and KubeProxyOutput values.
// You can construct a concrete instance of `KubeProxyInput` via:
//
//          KubeProxyArgs{...}
type KubeProxyInput interface {
	pulumi.Input

	ToKubeProxyOutput() KubeProxyOutput
	ToKubeProxyOutputWithContext(context.Context) KubeProxyOutput
}

type KubeProxyArgs struct {
	Disabled pulumi.BoolPtrInput   `pulumi:"disabled"`
	Mode     pulumi.StringPtrInput `pulumi:"mode"`
}

func (KubeProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeProxy)(nil)).Elem()
}

func (i KubeProxyArgs) ToKubeProxyOutput() KubeProxyOutput {
	return i.ToKubeProxyOutputWithContext(context.Background())
}

func (i KubeProxyArgs) ToKubeProxyOutputWithContext(ctx context.Context) KubeProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeProxyOutput)
}

func (i KubeProxyArgs) ToKubeProxyPtrOutput() KubeProxyPtrOutput {
	return i.ToKubeProxyPtrOutputWithContext(context.Background())
}

func (i KubeProxyArgs) ToKubeProxyPtrOutputWithContext(ctx context.Context) KubeProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeProxyOutput).ToKubeProxyPtrOutputWithContext(ctx)
}

// KubeProxyPtrInput is an input type that accepts KubeProxyArgs, KubeProxyPtr and KubeProxyPtrOutput values.
// You can construct a concrete instance of `KubeProxyPtrInput` via:
//
//          KubeProxyArgs{...}
//
//  or:
//
//          nil
type KubeProxyPtrInput interface {
	pulumi.Input

	ToKubeProxyPtrOutput() KubeProxyPtrOutput
	ToKubeProxyPtrOutputWithContext(context.Context) KubeProxyPtrOutput
}

type kubeProxyPtrType KubeProxyArgs

func KubeProxyPtr(v *KubeProxyArgs) KubeProxyPtrInput {
	return (*kubeProxyPtrType)(v)
}

func (*kubeProxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeProxy)(nil)).Elem()
}

func (i *kubeProxyPtrType) ToKubeProxyPtrOutput() KubeProxyPtrOutput {
	return i.ToKubeProxyPtrOutputWithContext(context.Background())
}

func (i *kubeProxyPtrType) ToKubeProxyPtrOutputWithContext(ctx context.Context) KubeProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeProxyPtrOutput)
}

type KubeProxyOutput struct{ *pulumi.OutputState }

func (KubeProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeProxy)(nil)).Elem()
}

func (o KubeProxyOutput) ToKubeProxyOutput() KubeProxyOutput {
	return o
}

func (o KubeProxyOutput) ToKubeProxyOutputWithContext(ctx context.Context) KubeProxyOutput {
	return o
}

func (o KubeProxyOutput) ToKubeProxyPtrOutput() KubeProxyPtrOutput {
	return o.ToKubeProxyPtrOutputWithContext(context.Background())
}

func (o KubeProxyOutput) ToKubeProxyPtrOutputWithContext(ctx context.Context) KubeProxyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubeProxy) *KubeProxy {
		return &v
	}).(KubeProxyPtrOutput)
}

func (o KubeProxyOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubeProxy) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o KubeProxyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeProxy) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type KubeProxyPtrOutput struct{ *pulumi.OutputState }

func (KubeProxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeProxy)(nil)).Elem()
}

func (o KubeProxyPtrOutput) ToKubeProxyPtrOutput() KubeProxyPtrOutput {
	return o
}

func (o KubeProxyPtrOutput) ToKubeProxyPtrOutputWithContext(ctx context.Context) KubeProxyPtrOutput {
	return o
}

func (o KubeProxyPtrOutput) Elem() KubeProxyOutput {
	return o.ApplyT(func(v *KubeProxy) KubeProxy {
		if v != nil {
			return *v
		}
		var ret KubeProxy
		return ret
	}).(KubeProxyOutput)
}

func (o KubeProxyPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubeProxy) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

func (o KubeProxyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeProxy) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type KubeRouter struct {
	AutoMTU        *bool    `pulumi:"autoMTU"`
	Mtu            *float64 `pulumi:"mtu"`
	PeerRouterASNs *string  `pulumi:"peerRouterASNs"`
	PeerRouterIPs  *string  `pulumi:"peerRouterIPs"`
}

// KubeRouterInput is an input type that accepts KubeRouterArgs and KubeRouterOutput values.
// You can construct a concrete instance of `KubeRouterInput` via:
//
//          KubeRouterArgs{...}
type KubeRouterInput interface {
	pulumi.Input

	ToKubeRouterOutput() KubeRouterOutput
	ToKubeRouterOutputWithContext(context.Context) KubeRouterOutput
}

type KubeRouterArgs struct {
	AutoMTU        pulumi.BoolPtrInput    `pulumi:"autoMTU"`
	Mtu            pulumi.Float64PtrInput `pulumi:"mtu"`
	PeerRouterASNs pulumi.StringPtrInput  `pulumi:"peerRouterASNs"`
	PeerRouterIPs  pulumi.StringPtrInput  `pulumi:"peerRouterIPs"`
}

func (KubeRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeRouter)(nil)).Elem()
}

func (i KubeRouterArgs) ToKubeRouterOutput() KubeRouterOutput {
	return i.ToKubeRouterOutputWithContext(context.Background())
}

func (i KubeRouterArgs) ToKubeRouterOutputWithContext(ctx context.Context) KubeRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeRouterOutput)
}

func (i KubeRouterArgs) ToKubeRouterPtrOutput() KubeRouterPtrOutput {
	return i.ToKubeRouterPtrOutputWithContext(context.Background())
}

func (i KubeRouterArgs) ToKubeRouterPtrOutputWithContext(ctx context.Context) KubeRouterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeRouterOutput).ToKubeRouterPtrOutputWithContext(ctx)
}

// KubeRouterPtrInput is an input type that accepts KubeRouterArgs, KubeRouterPtr and KubeRouterPtrOutput values.
// You can construct a concrete instance of `KubeRouterPtrInput` via:
//
//          KubeRouterArgs{...}
//
//  or:
//
//          nil
type KubeRouterPtrInput interface {
	pulumi.Input

	ToKubeRouterPtrOutput() KubeRouterPtrOutput
	ToKubeRouterPtrOutputWithContext(context.Context) KubeRouterPtrOutput
}

type kubeRouterPtrType KubeRouterArgs

func KubeRouterPtr(v *KubeRouterArgs) KubeRouterPtrInput {
	return (*kubeRouterPtrType)(v)
}

func (*kubeRouterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeRouter)(nil)).Elem()
}

func (i *kubeRouterPtrType) ToKubeRouterPtrOutput() KubeRouterPtrOutput {
	return i.ToKubeRouterPtrOutputWithContext(context.Background())
}

func (i *kubeRouterPtrType) ToKubeRouterPtrOutputWithContext(ctx context.Context) KubeRouterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeRouterPtrOutput)
}

type KubeRouterOutput struct{ *pulumi.OutputState }

func (KubeRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeRouter)(nil)).Elem()
}

func (o KubeRouterOutput) ToKubeRouterOutput() KubeRouterOutput {
	return o
}

func (o KubeRouterOutput) ToKubeRouterOutputWithContext(ctx context.Context) KubeRouterOutput {
	return o
}

func (o KubeRouterOutput) ToKubeRouterPtrOutput() KubeRouterPtrOutput {
	return o.ToKubeRouterPtrOutputWithContext(context.Background())
}

func (o KubeRouterOutput) ToKubeRouterPtrOutputWithContext(ctx context.Context) KubeRouterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubeRouter) *KubeRouter {
		return &v
	}).(KubeRouterPtrOutput)
}

func (o KubeRouterOutput) AutoMTU() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubeRouter) *bool { return v.AutoMTU }).(pulumi.BoolPtrOutput)
}

func (o KubeRouterOutput) Mtu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KubeRouter) *float64 { return v.Mtu }).(pulumi.Float64PtrOutput)
}

func (o KubeRouterOutput) PeerRouterASNs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeRouter) *string { return v.PeerRouterASNs }).(pulumi.StringPtrOutput)
}

func (o KubeRouterOutput) PeerRouterIPs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeRouter) *string { return v.PeerRouterIPs }).(pulumi.StringPtrOutput)
}

type KubeRouterPtrOutput struct{ *pulumi.OutputState }

func (KubeRouterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeRouter)(nil)).Elem()
}

func (o KubeRouterPtrOutput) ToKubeRouterPtrOutput() KubeRouterPtrOutput {
	return o
}

func (o KubeRouterPtrOutput) ToKubeRouterPtrOutputWithContext(ctx context.Context) KubeRouterPtrOutput {
	return o
}

func (o KubeRouterPtrOutput) Elem() KubeRouterOutput {
	return o.ApplyT(func(v *KubeRouter) KubeRouter {
		if v != nil {
			return *v
		}
		var ret KubeRouter
		return ret
	}).(KubeRouterOutput)
}

func (o KubeRouterPtrOutput) AutoMTU() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubeRouter) *bool {
		if v == nil {
			return nil
		}
		return v.AutoMTU
	}).(pulumi.BoolPtrOutput)
}

func (o KubeRouterPtrOutput) Mtu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KubeRouter) *float64 {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.Float64PtrOutput)
}

func (o KubeRouterPtrOutput) PeerRouterASNs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeRouter) *string {
		if v == nil {
			return nil
		}
		return v.PeerRouterASNs
	}).(pulumi.StringPtrOutput)
}

func (o KubeRouterPtrOutput) PeerRouterIPs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeRouter) *string {
		if v == nil {
			return nil
		}
		return v.PeerRouterIPs
	}).(pulumi.StringPtrOutput)
}

type Localhost struct {
	Enabled *bool `pulumi:"enabled"`
}

// LocalhostInput is an input type that accepts LocalhostArgs and LocalhostOutput values.
// You can construct a concrete instance of `LocalhostInput` via:
//
//          LocalhostArgs{...}
type LocalhostInput interface {
	pulumi.Input

	ToLocalhostOutput() LocalhostOutput
	ToLocalhostOutputWithContext(context.Context) LocalhostOutput
}

type LocalhostArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (LocalhostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Localhost)(nil)).Elem()
}

func (i LocalhostArgs) ToLocalhostOutput() LocalhostOutput {
	return i.ToLocalhostOutputWithContext(context.Background())
}

func (i LocalhostArgs) ToLocalhostOutputWithContext(ctx context.Context) LocalhostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalhostOutput)
}

func (i LocalhostArgs) ToLocalhostPtrOutput() LocalhostPtrOutput {
	return i.ToLocalhostPtrOutputWithContext(context.Background())
}

func (i LocalhostArgs) ToLocalhostPtrOutputWithContext(ctx context.Context) LocalhostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalhostOutput).ToLocalhostPtrOutputWithContext(ctx)
}

// LocalhostPtrInput is an input type that accepts LocalhostArgs, LocalhostPtr and LocalhostPtrOutput values.
// You can construct a concrete instance of `LocalhostPtrInput` via:
//
//          LocalhostArgs{...}
//
//  or:
//
//          nil
type LocalhostPtrInput interface {
	pulumi.Input

	ToLocalhostPtrOutput() LocalhostPtrOutput
	ToLocalhostPtrOutputWithContext(context.Context) LocalhostPtrOutput
}

type localhostPtrType LocalhostArgs

func LocalhostPtr(v *LocalhostArgs) LocalhostPtrInput {
	return (*localhostPtrType)(v)
}

func (*localhostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Localhost)(nil)).Elem()
}

func (i *localhostPtrType) ToLocalhostPtrOutput() LocalhostPtrOutput {
	return i.ToLocalhostPtrOutputWithContext(context.Background())
}

func (i *localhostPtrType) ToLocalhostPtrOutputWithContext(ctx context.Context) LocalhostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalhostPtrOutput)
}

type LocalhostOutput struct{ *pulumi.OutputState }

func (LocalhostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Localhost)(nil)).Elem()
}

func (o LocalhostOutput) ToLocalhostOutput() LocalhostOutput {
	return o
}

func (o LocalhostOutput) ToLocalhostOutputWithContext(ctx context.Context) LocalhostOutput {
	return o
}

func (o LocalhostOutput) ToLocalhostPtrOutput() LocalhostPtrOutput {
	return o.ToLocalhostPtrOutputWithContext(context.Background())
}

func (o LocalhostOutput) ToLocalhostPtrOutputWithContext(ctx context.Context) LocalhostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Localhost) *Localhost {
		return &v
	}).(LocalhostPtrOutput)
}

func (o LocalhostOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Localhost) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type LocalhostPtrOutput struct{ *pulumi.OutputState }

func (LocalhostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Localhost)(nil)).Elem()
}

func (o LocalhostPtrOutput) ToLocalhostPtrOutput() LocalhostPtrOutput {
	return o
}

func (o LocalhostPtrOutput) ToLocalhostPtrOutputWithContext(ctx context.Context) LocalhostPtrOutput {
	return o
}

func (o LocalhostPtrOutput) Elem() LocalhostOutput {
	return o.ApplyT(func(v *Localhost) Localhost {
		if v != nil {
			return *v
		}
		var ret Localhost
		return ret
	}).(LocalhostOutput)
}

func (o LocalhostPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Localhost) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type Metadata struct {
	Name string `pulumi:"name"`
}

// MetadataInput is an input type that accepts MetadataArgs and MetadataOutput values.
// You can construct a concrete instance of `MetadataInput` via:
//
//          MetadataArgs{...}
type MetadataInput interface {
	pulumi.Input

	ToMetadataOutput() MetadataOutput
	ToMetadataOutputWithContext(context.Context) MetadataOutput
}

type MetadataArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (MetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadata)(nil)).Elem()
}

func (i MetadataArgs) ToMetadataOutput() MetadataOutput {
	return i.ToMetadataOutputWithContext(context.Background())
}

func (i MetadataArgs) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput)
}

func (i MetadataArgs) ToMetadataPtrOutput() MetadataPtrOutput {
	return i.ToMetadataPtrOutputWithContext(context.Background())
}

func (i MetadataArgs) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput).ToMetadataPtrOutputWithContext(ctx)
}

// MetadataPtrInput is an input type that accepts MetadataArgs, MetadataPtr and MetadataPtrOutput values.
// You can construct a concrete instance of `MetadataPtrInput` via:
//
//          MetadataArgs{...}
//
//  or:
//
//          nil
type MetadataPtrInput interface {
	pulumi.Input

	ToMetadataPtrOutput() MetadataPtrOutput
	ToMetadataPtrOutputWithContext(context.Context) MetadataPtrOutput
}

type metadataPtrType MetadataArgs

func MetadataPtr(v *MetadataArgs) MetadataPtrInput {
	return (*metadataPtrType)(v)
}

func (*metadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (i *metadataPtrType) ToMetadataPtrOutput() MetadataPtrOutput {
	return i.ToMetadataPtrOutputWithContext(context.Background())
}

func (i *metadataPtrType) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataPtrOutput)
}

type MetadataOutput struct{ *pulumi.OutputState }

func (MetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadata)(nil)).Elem()
}

func (o MetadataOutput) ToMetadataOutput() MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataPtrOutput() MetadataPtrOutput {
	return o.ToMetadataPtrOutputWithContext(context.Background())
}

func (o MetadataOutput) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Metadata) *Metadata {
		return &v
	}).(MetadataPtrOutput)
}

func (o MetadataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Metadata) string { return v.Name }).(pulumi.StringOutput)
}

type MetadataPtrOutput struct{ *pulumi.OutputState }

func (MetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (o MetadataPtrOutput) ToMetadataPtrOutput() MetadataPtrOutput {
	return o
}

func (o MetadataPtrOutput) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return o
}

func (o MetadataPtrOutput) Elem() MetadataOutput {
	return o.ApplyT(func(v *Metadata) Metadata {
		if v != nil {
			return *v
		}
		var ret Metadata
		return ret
	}).(MetadataOutput)
}

func (o MetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type Network struct {
	Calico      *Calico     `pulumi:"calico"`
	DualStack   *DualStack  `pulumi:"dualStack"`
	KubeProxy   *KubeProxy  `pulumi:"kubeProxy"`
	Kuberouter  *KubeRouter `pulumi:"kuberouter"`
	PodCIDR     *string     `pulumi:"podCIDR"`
	Provider    *string     `pulumi:"provider"`
	ServiceCIDR *string     `pulumi:"serviceCIDR"`
}

// NetworkInput is an input type that accepts NetworkArgs and NetworkOutput values.
// You can construct a concrete instance of `NetworkInput` via:
//
//          NetworkArgs{...}
type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(context.Context) NetworkOutput
}

type NetworkArgs struct {
	Calico      CalicoPtrInput        `pulumi:"calico"`
	DualStack   DualStackPtrInput     `pulumi:"dualStack"`
	KubeProxy   KubeProxyPtrInput     `pulumi:"kubeProxy"`
	Kuberouter  KubeRouterPtrInput    `pulumi:"kuberouter"`
	PodCIDR     pulumi.StringPtrInput `pulumi:"podCIDR"`
	Provider    pulumi.StringPtrInput `pulumi:"provider"`
	ServiceCIDR pulumi.StringPtrInput `pulumi:"serviceCIDR"`
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Network)(nil)).Elem()
}

func (i NetworkArgs) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i NetworkArgs) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

func (i NetworkArgs) ToNetworkPtrOutput() NetworkPtrOutput {
	return i.ToNetworkPtrOutputWithContext(context.Background())
}

func (i NetworkArgs) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput).ToNetworkPtrOutputWithContext(ctx)
}

// NetworkPtrInput is an input type that accepts NetworkArgs, NetworkPtr and NetworkPtrOutput values.
// You can construct a concrete instance of `NetworkPtrInput` via:
//
//          NetworkArgs{...}
//
//  or:
//
//          nil
type NetworkPtrInput interface {
	pulumi.Input

	ToNetworkPtrOutput() NetworkPtrOutput
	ToNetworkPtrOutputWithContext(context.Context) NetworkPtrOutput
}

type networkPtrType NetworkArgs

func NetworkPtr(v *NetworkArgs) NetworkPtrInput {
	return (*networkPtrType)(v)
}

func (*networkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *networkPtrType) ToNetworkPtrOutput() NetworkPtrOutput {
	return i.ToNetworkPtrOutputWithContext(context.Background())
}

func (i *networkPtrType) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPtrOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkPtrOutput() NetworkPtrOutput {
	return o.ToNetworkPtrOutputWithContext(context.Background())
}

func (o NetworkOutput) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Network) *Network {
		return &v
	}).(NetworkPtrOutput)
}

func (o NetworkOutput) Calico() CalicoPtrOutput {
	return o.ApplyT(func(v Network) *Calico { return v.Calico }).(CalicoPtrOutput)
}

func (o NetworkOutput) DualStack() DualStackPtrOutput {
	return o.ApplyT(func(v Network) *DualStack { return v.DualStack }).(DualStackPtrOutput)
}

func (o NetworkOutput) KubeProxy() KubeProxyPtrOutput {
	return o.ApplyT(func(v Network) *KubeProxy { return v.KubeProxy }).(KubeProxyPtrOutput)
}

func (o NetworkOutput) Kuberouter() KubeRouterPtrOutput {
	return o.ApplyT(func(v Network) *KubeRouter { return v.Kuberouter }).(KubeRouterPtrOutput)
}

func (o NetworkOutput) PodCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.PodCIDR }).(pulumi.StringPtrOutput)
}

func (o NetworkOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o NetworkOutput) ServiceCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.ServiceCIDR }).(pulumi.StringPtrOutput)
}

type NetworkPtrOutput struct{ *pulumi.OutputState }

func (NetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkPtrOutput) ToNetworkPtrOutput() NetworkPtrOutput {
	return o
}

func (o NetworkPtrOutput) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return o
}

func (o NetworkPtrOutput) Elem() NetworkOutput {
	return o.ApplyT(func(v *Network) Network {
		if v != nil {
			return *v
		}
		var ret Network
		return ret
	}).(NetworkOutput)
}

func (o NetworkPtrOutput) Calico() CalicoPtrOutput {
	return o.ApplyT(func(v *Network) *Calico {
		if v == nil {
			return nil
		}
		return v.Calico
	}).(CalicoPtrOutput)
}

func (o NetworkPtrOutput) DualStack() DualStackPtrOutput {
	return o.ApplyT(func(v *Network) *DualStack {
		if v == nil {
			return nil
		}
		return v.DualStack
	}).(DualStackPtrOutput)
}

func (o NetworkPtrOutput) KubeProxy() KubeProxyPtrOutput {
	return o.ApplyT(func(v *Network) *KubeProxy {
		if v == nil {
			return nil
		}
		return v.KubeProxy
	}).(KubeProxyPtrOutput)
}

func (o NetworkPtrOutput) Kuberouter() KubeRouterPtrOutput {
	return o.ApplyT(func(v *Network) *KubeRouter {
		if v == nil {
			return nil
		}
		return v.Kuberouter
	}).(KubeRouterPtrOutput)
}

func (o NetworkPtrOutput) PodCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.PodCIDR
	}).(pulumi.StringPtrOutput)
}

func (o NetworkPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o NetworkPtrOutput) ServiceCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCIDR
	}).(pulumi.StringPtrOutput)
}

type PodSecurityPolicy struct {
	DefaultPolicy *string `pulumi:"defaultPolicy"`
}

// PodSecurityPolicyInput is an input type that accepts PodSecurityPolicyArgs and PodSecurityPolicyOutput values.
// You can construct a concrete instance of `PodSecurityPolicyInput` via:
//
//          PodSecurityPolicyArgs{...}
type PodSecurityPolicyInput interface {
	pulumi.Input

	ToPodSecurityPolicyOutput() PodSecurityPolicyOutput
	ToPodSecurityPolicyOutputWithContext(context.Context) PodSecurityPolicyOutput
}

type PodSecurityPolicyArgs struct {
	DefaultPolicy pulumi.StringPtrInput `pulumi:"defaultPolicy"`
}

func (PodSecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicy)(nil)).Elem()
}

func (i PodSecurityPolicyArgs) ToPodSecurityPolicyOutput() PodSecurityPolicyOutput {
	return i.ToPodSecurityPolicyOutputWithContext(context.Background())
}

func (i PodSecurityPolicyArgs) ToPodSecurityPolicyOutputWithContext(ctx context.Context) PodSecurityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicyOutput)
}

func (i PodSecurityPolicyArgs) ToPodSecurityPolicyPtrOutput() PodSecurityPolicyPtrOutput {
	return i.ToPodSecurityPolicyPtrOutputWithContext(context.Background())
}

func (i PodSecurityPolicyArgs) ToPodSecurityPolicyPtrOutputWithContext(ctx context.Context) PodSecurityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicyOutput).ToPodSecurityPolicyPtrOutputWithContext(ctx)
}

// PodSecurityPolicyPtrInput is an input type that accepts PodSecurityPolicyArgs, PodSecurityPolicyPtr and PodSecurityPolicyPtrOutput values.
// You can construct a concrete instance of `PodSecurityPolicyPtrInput` via:
//
//          PodSecurityPolicyArgs{...}
//
//  or:
//
//          nil
type PodSecurityPolicyPtrInput interface {
	pulumi.Input

	ToPodSecurityPolicyPtrOutput() PodSecurityPolicyPtrOutput
	ToPodSecurityPolicyPtrOutputWithContext(context.Context) PodSecurityPolicyPtrOutput
}

type podSecurityPolicyPtrType PodSecurityPolicyArgs

func PodSecurityPolicyPtr(v *PodSecurityPolicyArgs) PodSecurityPolicyPtrInput {
	return (*podSecurityPolicyPtrType)(v)
}

func (*podSecurityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSecurityPolicy)(nil)).Elem()
}

func (i *podSecurityPolicyPtrType) ToPodSecurityPolicyPtrOutput() PodSecurityPolicyPtrOutput {
	return i.ToPodSecurityPolicyPtrOutputWithContext(context.Background())
}

func (i *podSecurityPolicyPtrType) ToPodSecurityPolicyPtrOutputWithContext(ctx context.Context) PodSecurityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicyPtrOutput)
}

type PodSecurityPolicyOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicy)(nil)).Elem()
}

func (o PodSecurityPolicyOutput) ToPodSecurityPolicyOutput() PodSecurityPolicyOutput {
	return o
}

func (o PodSecurityPolicyOutput) ToPodSecurityPolicyOutputWithContext(ctx context.Context) PodSecurityPolicyOutput {
	return o
}

func (o PodSecurityPolicyOutput) ToPodSecurityPolicyPtrOutput() PodSecurityPolicyPtrOutput {
	return o.ToPodSecurityPolicyPtrOutputWithContext(context.Background())
}

func (o PodSecurityPolicyOutput) ToPodSecurityPolicyPtrOutputWithContext(ctx context.Context) PodSecurityPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSecurityPolicy) *PodSecurityPolicy {
		return &v
	}).(PodSecurityPolicyPtrOutput)
}

func (o PodSecurityPolicyOutput) DefaultPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicy) *string { return v.DefaultPolicy }).(pulumi.StringPtrOutput)
}

type PodSecurityPolicyPtrOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSecurityPolicy)(nil)).Elem()
}

func (o PodSecurityPolicyPtrOutput) ToPodSecurityPolicyPtrOutput() PodSecurityPolicyPtrOutput {
	return o
}

func (o PodSecurityPolicyPtrOutput) ToPodSecurityPolicyPtrOutputWithContext(ctx context.Context) PodSecurityPolicyPtrOutput {
	return o
}

func (o PodSecurityPolicyPtrOutput) Elem() PodSecurityPolicyOutput {
	return o.ApplyT(func(v *PodSecurityPolicy) PodSecurityPolicy {
		if v != nil {
			return *v
		}
		var ret PodSecurityPolicy
		return ret
	}).(PodSecurityPolicyOutput)
}

func (o PodSecurityPolicyPtrOutput) DefaultPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicy) *string {
		if v == nil {
			return nil
		}
		return v.DefaultPolicy
	}).(pulumi.StringPtrOutput)
}

type SSH struct {
	Address string   `pulumi:"address"`
	Bastion *SSH     `pulumi:"bastion"`
	HostKey *string  `pulumi:"hostKey"`
	KeyPath *string  `pulumi:"keyPath"`
	Port    *float64 `pulumi:"port"`
	User    *string  `pulumi:"user"`
}

// SSHInput is an input type that accepts SSHArgs and SSHOutput values.
// You can construct a concrete instance of `SSHInput` via:
//
//          SSHArgs{...}
type SSHInput interface {
	pulumi.Input

	ToSSHOutput() SSHOutput
	ToSSHOutputWithContext(context.Context) SSHOutput
}

type SSHArgs struct {
	Address pulumi.StringInput     `pulumi:"address"`
	Bastion SSHPtrInput            `pulumi:"bastion"`
	HostKey pulumi.StringPtrInput  `pulumi:"hostKey"`
	KeyPath pulumi.StringPtrInput  `pulumi:"keyPath"`
	Port    pulumi.Float64PtrInput `pulumi:"port"`
	User    pulumi.StringPtrInput  `pulumi:"user"`
}

func (SSHArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSH)(nil)).Elem()
}

func (i SSHArgs) ToSSHOutput() SSHOutput {
	return i.ToSSHOutputWithContext(context.Background())
}

func (i SSHArgs) ToSSHOutputWithContext(ctx context.Context) SSHOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHOutput)
}

func (i SSHArgs) ToSSHPtrOutput() SSHPtrOutput {
	return i.ToSSHPtrOutputWithContext(context.Background())
}

func (i SSHArgs) ToSSHPtrOutputWithContext(ctx context.Context) SSHPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHOutput).ToSSHPtrOutputWithContext(ctx)
}

// SSHPtrInput is an input type that accepts SSHArgs, SSHPtr and SSHPtrOutput values.
// You can construct a concrete instance of `SSHPtrInput` via:
//
//          SSHArgs{...}
//
//  or:
//
//          nil
type SSHPtrInput interface {
	pulumi.Input

	ToSSHPtrOutput() SSHPtrOutput
	ToSSHPtrOutputWithContext(context.Context) SSHPtrOutput
}

type sshPtrType SSHArgs

func SSHPtr(v *SSHArgs) SSHPtrInput {
	return (*sshPtrType)(v)
}

func (*sshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SSH)(nil)).Elem()
}

func (i *sshPtrType) ToSSHPtrOutput() SSHPtrOutput {
	return i.ToSSHPtrOutputWithContext(context.Background())
}

func (i *sshPtrType) ToSSHPtrOutputWithContext(ctx context.Context) SSHPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHPtrOutput)
}

type SSHOutput struct{ *pulumi.OutputState }

func (SSHOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSH)(nil)).Elem()
}

func (o SSHOutput) ToSSHOutput() SSHOutput {
	return o
}

func (o SSHOutput) ToSSHOutputWithContext(ctx context.Context) SSHOutput {
	return o
}

func (o SSHOutput) ToSSHPtrOutput() SSHPtrOutput {
	return o.ToSSHPtrOutputWithContext(context.Background())
}

func (o SSHOutput) ToSSHPtrOutputWithContext(ctx context.Context) SSHPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SSH) *SSH {
		return &v
	}).(SSHPtrOutput)
}

func (o SSHOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v SSH) string { return v.Address }).(pulumi.StringOutput)
}

func (o SSHOutput) Bastion() SSHPtrOutput {
	return o.ApplyT(func(v SSH) *SSH { return v.Bastion }).(SSHPtrOutput)
}

func (o SSHOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSH) *string { return v.HostKey }).(pulumi.StringPtrOutput)
}

func (o SSHOutput) KeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSH) *string { return v.KeyPath }).(pulumi.StringPtrOutput)
}

func (o SSHOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SSH) *float64 { return v.Port }).(pulumi.Float64PtrOutput)
}

func (o SSHOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSH) *string { return v.User }).(pulumi.StringPtrOutput)
}

type SSHPtrOutput struct{ *pulumi.OutputState }

func (SSHPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSH)(nil)).Elem()
}

func (o SSHPtrOutput) ToSSHPtrOutput() SSHPtrOutput {
	return o
}

func (o SSHPtrOutput) ToSSHPtrOutputWithContext(ctx context.Context) SSHPtrOutput {
	return o
}

func (o SSHPtrOutput) Elem() SSHOutput {
	return o.ApplyT(func(v *SSH) SSH {
		if v != nil {
			return *v
		}
		var ret SSH
		return ret
	}).(SSHOutput)
}

func (o SSHPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSH) *string {
		if v == nil {
			return nil
		}
		return &v.Address
	}).(pulumi.StringPtrOutput)
}

func (o SSHPtrOutput) Bastion() SSHPtrOutput {
	return o.ApplyT(func(v *SSH) *SSH {
		if v == nil {
			return nil
		}
		return v.Bastion
	}).(SSHPtrOutput)
}

func (o SSHPtrOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSH) *string {
		if v == nil {
			return nil
		}
		return v.HostKey
	}).(pulumi.StringPtrOutput)
}

func (o SSHPtrOutput) KeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSH) *string {
		if v == nil {
			return nil
		}
		return v.KeyPath
	}).(pulumi.StringPtrOutput)
}

func (o SSHPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SSH) *float64 {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.Float64PtrOutput)
}

func (o SSHPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSH) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type Spec struct {
	Hosts []Host `pulumi:"hosts"`
	K0s   *K0s   `pulumi:"k0s"`
}

// SpecInput is an input type that accepts SpecArgs and SpecOutput values.
// You can construct a concrete instance of `SpecInput` via:
//
//          SpecArgs{...}
type SpecInput interface {
	pulumi.Input

	ToSpecOutput() SpecOutput
	ToSpecOutputWithContext(context.Context) SpecOutput
}

type SpecArgs struct {
	Hosts HostArrayInput `pulumi:"hosts"`
	K0s   K0sPtrInput    `pulumi:"k0s"`
}

func (SpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Spec)(nil)).Elem()
}

func (i SpecArgs) ToSpecOutput() SpecOutput {
	return i.ToSpecOutputWithContext(context.Background())
}

func (i SpecArgs) ToSpecOutputWithContext(ctx context.Context) SpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpecOutput)
}

type SpecOutput struct{ *pulumi.OutputState }

func (SpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Spec)(nil)).Elem()
}

func (o SpecOutput) ToSpecOutput() SpecOutput {
	return o
}

func (o SpecOutput) ToSpecOutputWithContext(ctx context.Context) SpecOutput {
	return o
}

func (o SpecOutput) Hosts() HostArrayOutput {
	return o.ApplyT(func(v Spec) []Host { return v.Hosts }).(HostArrayOutput)
}

func (o SpecOutput) K0s() K0sPtrOutput {
	return o.ApplyT(func(v Spec) *K0s { return v.K0s }).(K0sPtrOutput)
}

type Storage struct {
	Etcd *Etcd   `pulumi:"etcd"`
	Type *string `pulumi:"type"`
}

// StorageInput is an input type that accepts StorageArgs and StorageOutput values.
// You can construct a concrete instance of `StorageInput` via:
//
//          StorageArgs{...}
type StorageInput interface {
	pulumi.Input

	ToStorageOutput() StorageOutput
	ToStorageOutputWithContext(context.Context) StorageOutput
}

type StorageArgs struct {
	Etcd EtcdPtrInput          `pulumi:"etcd"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (StorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Storage)(nil)).Elem()
}

func (i StorageArgs) ToStorageOutput() StorageOutput {
	return i.ToStorageOutputWithContext(context.Background())
}

func (i StorageArgs) ToStorageOutputWithContext(ctx context.Context) StorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOutput)
}

func (i StorageArgs) ToStoragePtrOutput() StoragePtrOutput {
	return i.ToStoragePtrOutputWithContext(context.Background())
}

func (i StorageArgs) ToStoragePtrOutputWithContext(ctx context.Context) StoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOutput).ToStoragePtrOutputWithContext(ctx)
}

// StoragePtrInput is an input type that accepts StorageArgs, StoragePtr and StoragePtrOutput values.
// You can construct a concrete instance of `StoragePtrInput` via:
//
//          StorageArgs{...}
//
//  or:
//
//          nil
type StoragePtrInput interface {
	pulumi.Input

	ToStoragePtrOutput() StoragePtrOutput
	ToStoragePtrOutputWithContext(context.Context) StoragePtrOutput
}

type storagePtrType StorageArgs

func StoragePtr(v *StorageArgs) StoragePtrInput {
	return (*storagePtrType)(v)
}

func (*storagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Storage)(nil)).Elem()
}

func (i *storagePtrType) ToStoragePtrOutput() StoragePtrOutput {
	return i.ToStoragePtrOutputWithContext(context.Background())
}

func (i *storagePtrType) ToStoragePtrOutputWithContext(ctx context.Context) StoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePtrOutput)
}

type StorageOutput struct{ *pulumi.OutputState }

func (StorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Storage)(nil)).Elem()
}

func (o StorageOutput) ToStorageOutput() StorageOutput {
	return o
}

func (o StorageOutput) ToStorageOutputWithContext(ctx context.Context) StorageOutput {
	return o
}

func (o StorageOutput) ToStoragePtrOutput() StoragePtrOutput {
	return o.ToStoragePtrOutputWithContext(context.Background())
}

func (o StorageOutput) ToStoragePtrOutputWithContext(ctx context.Context) StoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Storage) *Storage {
		return &v
	}).(StoragePtrOutput)
}

func (o StorageOutput) Etcd() EtcdPtrOutput {
	return o.ApplyT(func(v Storage) *Etcd { return v.Etcd }).(EtcdPtrOutput)
}

func (o StorageOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Storage) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type StoragePtrOutput struct{ *pulumi.OutputState }

func (StoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Storage)(nil)).Elem()
}

func (o StoragePtrOutput) ToStoragePtrOutput() StoragePtrOutput {
	return o
}

func (o StoragePtrOutput) ToStoragePtrOutputWithContext(ctx context.Context) StoragePtrOutput {
	return o
}

func (o StoragePtrOutput) Elem() StorageOutput {
	return o.ApplyT(func(v *Storage) Storage {
		if v != nil {
			return *v
		}
		var ret Storage
		return ret
	}).(StorageOutput)
}

func (o StoragePtrOutput) Etcd() EtcdPtrOutput {
	return o.ApplyT(func(v *Storage) *Etcd {
		if v == nil {
			return nil
		}
		return v.Etcd
	}).(EtcdPtrOutput)
}

func (o StoragePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Storage) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type Telemetry struct {
	Enabled *bool `pulumi:"enabled"`
}

// TelemetryInput is an input type that accepts TelemetryArgs and TelemetryOutput values.
// You can construct a concrete instance of `TelemetryInput` via:
//
//          TelemetryArgs{...}
type TelemetryInput interface {
	pulumi.Input

	ToTelemetryOutput() TelemetryOutput
	ToTelemetryOutputWithContext(context.Context) TelemetryOutput
}

type TelemetryArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (TelemetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Telemetry)(nil)).Elem()
}

func (i TelemetryArgs) ToTelemetryOutput() TelemetryOutput {
	return i.ToTelemetryOutputWithContext(context.Background())
}

func (i TelemetryArgs) ToTelemetryOutputWithContext(ctx context.Context) TelemetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryOutput)
}

func (i TelemetryArgs) ToTelemetryPtrOutput() TelemetryPtrOutput {
	return i.ToTelemetryPtrOutputWithContext(context.Background())
}

func (i TelemetryArgs) ToTelemetryPtrOutputWithContext(ctx context.Context) TelemetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryOutput).ToTelemetryPtrOutputWithContext(ctx)
}

// TelemetryPtrInput is an input type that accepts TelemetryArgs, TelemetryPtr and TelemetryPtrOutput values.
// You can construct a concrete instance of `TelemetryPtrInput` via:
//
//          TelemetryArgs{...}
//
//  or:
//
//          nil
type TelemetryPtrInput interface {
	pulumi.Input

	ToTelemetryPtrOutput() TelemetryPtrOutput
	ToTelemetryPtrOutputWithContext(context.Context) TelemetryPtrOutput
}

type telemetryPtrType TelemetryArgs

func TelemetryPtr(v *TelemetryArgs) TelemetryPtrInput {
	return (*telemetryPtrType)(v)
}

func (*telemetryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Telemetry)(nil)).Elem()
}

func (i *telemetryPtrType) ToTelemetryPtrOutput() TelemetryPtrOutput {
	return i.ToTelemetryPtrOutputWithContext(context.Background())
}

func (i *telemetryPtrType) ToTelemetryPtrOutputWithContext(ctx context.Context) TelemetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryPtrOutput)
}

type TelemetryOutput struct{ *pulumi.OutputState }

func (TelemetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Telemetry)(nil)).Elem()
}

func (o TelemetryOutput) ToTelemetryOutput() TelemetryOutput {
	return o
}

func (o TelemetryOutput) ToTelemetryOutputWithContext(ctx context.Context) TelemetryOutput {
	return o
}

func (o TelemetryOutput) ToTelemetryPtrOutput() TelemetryPtrOutput {
	return o.ToTelemetryPtrOutputWithContext(context.Background())
}

func (o TelemetryOutput) ToTelemetryPtrOutputWithContext(ctx context.Context) TelemetryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Telemetry) *Telemetry {
		return &v
	}).(TelemetryPtrOutput)
}

func (o TelemetryOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Telemetry) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type TelemetryPtrOutput struct{ *pulumi.OutputState }

func (TelemetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Telemetry)(nil)).Elem()
}

func (o TelemetryPtrOutput) ToTelemetryPtrOutput() TelemetryPtrOutput {
	return o
}

func (o TelemetryPtrOutput) ToTelemetryPtrOutputWithContext(ctx context.Context) TelemetryPtrOutput {
	return o
}

func (o TelemetryPtrOutput) Elem() TelemetryOutput {
	return o.ApplyT(func(v *Telemetry) Telemetry {
		if v != nil {
			return *v
		}
		var ret Telemetry
		return ret
	}).(TelemetryOutput)
}

func (o TelemetryPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Telemetry) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type UploadFile struct {
	DirPerm *float64 `pulumi:"dirPerm"`
	Dst     *string  `pulumi:"dst"`
	DstDir  *string  `pulumi:"dstDir"`
	Group   *string  `pulumi:"group"`
	Name    *string  `pulumi:"name"`
	Perm    *float64 `pulumi:"perm"`
	Src     *string  `pulumi:"src"`
	User    *string  `pulumi:"user"`
}

// UploadFileInput is an input type that accepts UploadFileArgs and UploadFileOutput values.
// You can construct a concrete instance of `UploadFileInput` via:
//
//          UploadFileArgs{...}
type UploadFileInput interface {
	pulumi.Input

	ToUploadFileOutput() UploadFileOutput
	ToUploadFileOutputWithContext(context.Context) UploadFileOutput
}

type UploadFileArgs struct {
	DirPerm pulumi.Float64PtrInput `pulumi:"dirPerm"`
	Dst     pulumi.StringPtrInput  `pulumi:"dst"`
	DstDir  pulumi.StringPtrInput  `pulumi:"dstDir"`
	Group   pulumi.StringPtrInput  `pulumi:"group"`
	Name    pulumi.StringPtrInput  `pulumi:"name"`
	Perm    pulumi.Float64PtrInput `pulumi:"perm"`
	Src     pulumi.StringPtrInput  `pulumi:"src"`
	User    pulumi.StringPtrInput  `pulumi:"user"`
}

func (UploadFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadFile)(nil)).Elem()
}

func (i UploadFileArgs) ToUploadFileOutput() UploadFileOutput {
	return i.ToUploadFileOutputWithContext(context.Background())
}

func (i UploadFileArgs) ToUploadFileOutputWithContext(ctx context.Context) UploadFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadFileOutput)
}

// UploadFileArrayInput is an input type that accepts UploadFileArray and UploadFileArrayOutput values.
// You can construct a concrete instance of `UploadFileArrayInput` via:
//
//          UploadFileArray{ UploadFileArgs{...} }
type UploadFileArrayInput interface {
	pulumi.Input

	ToUploadFileArrayOutput() UploadFileArrayOutput
	ToUploadFileArrayOutputWithContext(context.Context) UploadFileArrayOutput
}

type UploadFileArray []UploadFileInput

func (UploadFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UploadFile)(nil)).Elem()
}

func (i UploadFileArray) ToUploadFileArrayOutput() UploadFileArrayOutput {
	return i.ToUploadFileArrayOutputWithContext(context.Background())
}

func (i UploadFileArray) ToUploadFileArrayOutputWithContext(ctx context.Context) UploadFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadFileArrayOutput)
}

type UploadFileOutput struct{ *pulumi.OutputState }

func (UploadFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadFile)(nil)).Elem()
}

func (o UploadFileOutput) ToUploadFileOutput() UploadFileOutput {
	return o
}

func (o UploadFileOutput) ToUploadFileOutputWithContext(ctx context.Context) UploadFileOutput {
	return o
}

func (o UploadFileOutput) DirPerm() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v UploadFile) *float64 { return v.DirPerm }).(pulumi.Float64PtrOutput)
}

func (o UploadFileOutput) Dst() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadFile) *string { return v.Dst }).(pulumi.StringPtrOutput)
}

func (o UploadFileOutput) DstDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadFile) *string { return v.DstDir }).(pulumi.StringPtrOutput)
}

func (o UploadFileOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadFile) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o UploadFileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadFile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o UploadFileOutput) Perm() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v UploadFile) *float64 { return v.Perm }).(pulumi.Float64PtrOutput)
}

func (o UploadFileOutput) Src() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadFile) *string { return v.Src }).(pulumi.StringPtrOutput)
}

func (o UploadFileOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadFile) *string { return v.User }).(pulumi.StringPtrOutput)
}

type UploadFileArrayOutput struct{ *pulumi.OutputState }

func (UploadFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UploadFile)(nil)).Elem()
}

func (o UploadFileArrayOutput) ToUploadFileArrayOutput() UploadFileArrayOutput {
	return o
}

func (o UploadFileArrayOutput) ToUploadFileArrayOutputWithContext(ctx context.Context) UploadFileArrayOutput {
	return o
}

func (o UploadFileArrayOutput) Index(i pulumi.IntInput) UploadFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UploadFile {
		return vs[0].([]UploadFile)[vs[1].(int)]
	}).(UploadFileOutput)
}

type WinRM struct {
	Address       string   `pulumi:"address"`
	Bastion       *SSH     `pulumi:"bastion"`
	CaCertPath    *string  `pulumi:"caCertPath"`
	CertPath      *string  `pulumi:"certPath"`
	Insecure      *bool    `pulumi:"insecure"`
	KeyPath       *string  `pulumi:"keyPath"`
	Password      *string  `pulumi:"password"`
	Port          *float64 `pulumi:"port"`
	TlsServerName *string  `pulumi:"tlsServerName"`
	UseHTTPS      *bool    `pulumi:"useHTTPS"`
	UseNTLM       *bool    `pulumi:"useNTLM"`
	User          *string  `pulumi:"user"`
}

// WinRMInput is an input type that accepts WinRMArgs and WinRMOutput values.
// You can construct a concrete instance of `WinRMInput` via:
//
//          WinRMArgs{...}
type WinRMInput interface {
	pulumi.Input

	ToWinRMOutput() WinRMOutput
	ToWinRMOutputWithContext(context.Context) WinRMOutput
}

type WinRMArgs struct {
	Address       pulumi.StringInput     `pulumi:"address"`
	Bastion       SSHPtrInput            `pulumi:"bastion"`
	CaCertPath    pulumi.StringPtrInput  `pulumi:"caCertPath"`
	CertPath      pulumi.StringPtrInput  `pulumi:"certPath"`
	Insecure      pulumi.BoolPtrInput    `pulumi:"insecure"`
	KeyPath       pulumi.StringPtrInput  `pulumi:"keyPath"`
	Password      pulumi.StringPtrInput  `pulumi:"password"`
	Port          pulumi.Float64PtrInput `pulumi:"port"`
	TlsServerName pulumi.StringPtrInput  `pulumi:"tlsServerName"`
	UseHTTPS      pulumi.BoolPtrInput    `pulumi:"useHTTPS"`
	UseNTLM       pulumi.BoolPtrInput    `pulumi:"useNTLM"`
	User          pulumi.StringPtrInput  `pulumi:"user"`
}

func (WinRMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRM)(nil)).Elem()
}

func (i WinRMArgs) ToWinRMOutput() WinRMOutput {
	return i.ToWinRMOutputWithContext(context.Background())
}

func (i WinRMArgs) ToWinRMOutputWithContext(ctx context.Context) WinRMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMOutput)
}

func (i WinRMArgs) ToWinRMPtrOutput() WinRMPtrOutput {
	return i.ToWinRMPtrOutputWithContext(context.Background())
}

func (i WinRMArgs) ToWinRMPtrOutputWithContext(ctx context.Context) WinRMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMOutput).ToWinRMPtrOutputWithContext(ctx)
}

// WinRMPtrInput is an input type that accepts WinRMArgs, WinRMPtr and WinRMPtrOutput values.
// You can construct a concrete instance of `WinRMPtrInput` via:
//
//          WinRMArgs{...}
//
//  or:
//
//          nil
type WinRMPtrInput interface {
	pulumi.Input

	ToWinRMPtrOutput() WinRMPtrOutput
	ToWinRMPtrOutputWithContext(context.Context) WinRMPtrOutput
}

type winRMPtrType WinRMArgs

func WinRMPtr(v *WinRMArgs) WinRMPtrInput {
	return (*winRMPtrType)(v)
}

func (*winRMPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WinRM)(nil)).Elem()
}

func (i *winRMPtrType) ToWinRMPtrOutput() WinRMPtrOutput {
	return i.ToWinRMPtrOutputWithContext(context.Background())
}

func (i *winRMPtrType) ToWinRMPtrOutputWithContext(ctx context.Context) WinRMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMPtrOutput)
}

type WinRMOutput struct{ *pulumi.OutputState }

func (WinRMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRM)(nil)).Elem()
}

func (o WinRMOutput) ToWinRMOutput() WinRMOutput {
	return o
}

func (o WinRMOutput) ToWinRMOutputWithContext(ctx context.Context) WinRMOutput {
	return o
}

func (o WinRMOutput) ToWinRMPtrOutput() WinRMPtrOutput {
	return o.ToWinRMPtrOutputWithContext(context.Background())
}

func (o WinRMOutput) ToWinRMPtrOutputWithContext(ctx context.Context) WinRMPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WinRM) *WinRM {
		return &v
	}).(WinRMPtrOutput)
}

func (o WinRMOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v WinRM) string { return v.Address }).(pulumi.StringOutput)
}

func (o WinRMOutput) Bastion() SSHPtrOutput {
	return o.ApplyT(func(v WinRM) *SSH { return v.Bastion }).(SSHPtrOutput)
}

func (o WinRMOutput) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRM) *string { return v.CaCertPath }).(pulumi.StringPtrOutput)
}

func (o WinRMOutput) CertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRM) *string { return v.CertPath }).(pulumi.StringPtrOutput)
}

func (o WinRMOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WinRM) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

func (o WinRMOutput) KeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRM) *string { return v.KeyPath }).(pulumi.StringPtrOutput)
}

func (o WinRMOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRM) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o WinRMOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WinRM) *float64 { return v.Port }).(pulumi.Float64PtrOutput)
}

func (o WinRMOutput) TlsServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRM) *string { return v.TlsServerName }).(pulumi.StringPtrOutput)
}

func (o WinRMOutput) UseHTTPS() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WinRM) *bool { return v.UseHTTPS }).(pulumi.BoolPtrOutput)
}

func (o WinRMOutput) UseNTLM() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WinRM) *bool { return v.UseNTLM }).(pulumi.BoolPtrOutput)
}

func (o WinRMOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRM) *string { return v.User }).(pulumi.StringPtrOutput)
}

type WinRMPtrOutput struct{ *pulumi.OutputState }

func (WinRMPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WinRM)(nil)).Elem()
}

func (o WinRMPtrOutput) ToWinRMPtrOutput() WinRMPtrOutput {
	return o
}

func (o WinRMPtrOutput) ToWinRMPtrOutputWithContext(ctx context.Context) WinRMPtrOutput {
	return o
}

func (o WinRMPtrOutput) Elem() WinRMOutput {
	return o.ApplyT(func(v *WinRM) WinRM {
		if v != nil {
			return *v
		}
		var ret WinRM
		return ret
	}).(WinRMOutput)
}

func (o WinRMPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WinRM) *string {
		if v == nil {
			return nil
		}
		return &v.Address
	}).(pulumi.StringPtrOutput)
}

func (o WinRMPtrOutput) Bastion() SSHPtrOutput {
	return o.ApplyT(func(v *WinRM) *SSH {
		if v == nil {
			return nil
		}
		return v.Bastion
	}).(SSHPtrOutput)
}

func (o WinRMPtrOutput) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WinRM) *string {
		if v == nil {
			return nil
		}
		return v.CaCertPath
	}).(pulumi.StringPtrOutput)
}

func (o WinRMPtrOutput) CertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WinRM) *string {
		if v == nil {
			return nil
		}
		return v.CertPath
	}).(pulumi.StringPtrOutput)
}

func (o WinRMPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WinRM) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

func (o WinRMPtrOutput) KeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WinRM) *string {
		if v == nil {
			return nil
		}
		return v.KeyPath
	}).(pulumi.StringPtrOutput)
}

func (o WinRMPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WinRM) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

func (o WinRMPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WinRM) *float64 {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.Float64PtrOutput)
}

func (o WinRMPtrOutput) TlsServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WinRM) *string {
		if v == nil {
			return nil
		}
		return v.TlsServerName
	}).(pulumi.StringPtrOutput)
}

func (o WinRMPtrOutput) UseHTTPS() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WinRM) *bool {
		if v == nil {
			return nil
		}
		return v.UseHTTPS
	}).(pulumi.BoolPtrOutput)
}

func (o WinRMPtrOutput) UseNTLM() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WinRM) *bool {
		if v == nil {
			return nil
		}
		return v.UseNTLM
	}).(pulumi.BoolPtrOutput)
}

func (o WinRMPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WinRM) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*APIInput)(nil)).Elem(), APIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*APIPtrInput)(nil)).Elem(), APIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalicoInput)(nil)).Elem(), CalicoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalicoPtrInput)(nil)).Elem(), CalicoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigInput)(nil)).Elem(), ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigPtrInput)(nil)).Elem(), ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImageInput)(nil)).Elem(), ContainerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImagePtrInput)(nil)).Elem(), ContainerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DualStackInput)(nil)).Elem(), DualStackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DualStackPtrInput)(nil)).Elem(), DualStackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdInput)(nil)).Elem(), EtcdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdPtrInput)(nil)).Elem(), EtcdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookInput)(nil)).Elem(), HookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookPtrInput)(nil)).Elem(), HookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HooksInput)(nil)).Elem(), HooksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HooksPtrInput)(nil)).Elem(), HooksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostInput)(nil)).Elem(), HostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostArrayInput)(nil)).Elem(), HostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesInput)(nil)).Elem(), ImagesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesPtrInput)(nil)).Elem(), ImagesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesCalicoInput)(nil)).Elem(), ImagesCalicoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesCalicoPtrInput)(nil)).Elem(), ImagesCalicoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesKubeRouterInput)(nil)).Elem(), ImagesKubeRouterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesKubeRouterPtrInput)(nil)).Elem(), ImagesKubeRouterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallConfigInput)(nil)).Elem(), InstallConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallConfigPtrInput)(nil)).Elem(), InstallConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallConfigUsersInput)(nil)).Elem(), InstallConfigUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallConfigUsersPtrInput)(nil)).Elem(), InstallConfigUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K0sInput)(nil)).Elem(), K0sArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K0sPtrInput)(nil)).Elem(), K0sArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K0sSpecInput)(nil)).Elem(), K0sSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K0sSpecPtrInput)(nil)).Elem(), K0sSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KonnectivityInput)(nil)).Elem(), KonnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KonnectivityPtrInput)(nil)).Elem(), KonnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeProxyInput)(nil)).Elem(), KubeProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeProxyPtrInput)(nil)).Elem(), KubeProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeRouterInput)(nil)).Elem(), KubeRouterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeRouterPtrInput)(nil)).Elem(), KubeRouterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalhostInput)(nil)).Elem(), LocalhostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalhostPtrInput)(nil)).Elem(), LocalhostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataInput)(nil)).Elem(), MetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataPtrInput)(nil)).Elem(), MetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), NetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPtrInput)(nil)).Elem(), NetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSecurityPolicyInput)(nil)).Elem(), PodSecurityPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSecurityPolicyPtrInput)(nil)).Elem(), PodSecurityPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SSHInput)(nil)).Elem(), SSHArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SSHPtrInput)(nil)).Elem(), SSHArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpecInput)(nil)).Elem(), SpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageInput)(nil)).Elem(), StorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoragePtrInput)(nil)).Elem(), StorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryInput)(nil)).Elem(), TelemetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryPtrInput)(nil)).Elem(), TelemetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UploadFileInput)(nil)).Elem(), UploadFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UploadFileArrayInput)(nil)).Elem(), UploadFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WinRMInput)(nil)).Elem(), WinRMArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WinRMPtrInput)(nil)).Elem(), WinRMArgs{})
	pulumi.RegisterOutputType(APIOutput{})
	pulumi.RegisterOutputType(APIPtrOutput{})
	pulumi.RegisterOutputType(CalicoOutput{})
	pulumi.RegisterOutputType(CalicoPtrOutput{})
	pulumi.RegisterOutputType(ConfigOutput{})
	pulumi.RegisterOutputType(ConfigPtrOutput{})
	pulumi.RegisterOutputType(ContainerImageOutput{})
	pulumi.RegisterOutputType(ContainerImagePtrOutput{})
	pulumi.RegisterOutputType(DualStackOutput{})
	pulumi.RegisterOutputType(DualStackPtrOutput{})
	pulumi.RegisterOutputType(EtcdOutput{})
	pulumi.RegisterOutputType(EtcdPtrOutput{})
	pulumi.RegisterOutputType(HookOutput{})
	pulumi.RegisterOutputType(HookPtrOutput{})
	pulumi.RegisterOutputType(HooksOutput{})
	pulumi.RegisterOutputType(HooksPtrOutput{})
	pulumi.RegisterOutputType(HostOutput{})
	pulumi.RegisterOutputType(HostArrayOutput{})
	pulumi.RegisterOutputType(ImagesOutput{})
	pulumi.RegisterOutputType(ImagesPtrOutput{})
	pulumi.RegisterOutputType(ImagesCalicoOutput{})
	pulumi.RegisterOutputType(ImagesCalicoPtrOutput{})
	pulumi.RegisterOutputType(ImagesKubeRouterOutput{})
	pulumi.RegisterOutputType(ImagesKubeRouterPtrOutput{})
	pulumi.RegisterOutputType(InstallConfigOutput{})
	pulumi.RegisterOutputType(InstallConfigPtrOutput{})
	pulumi.RegisterOutputType(InstallConfigUsersOutput{})
	pulumi.RegisterOutputType(InstallConfigUsersPtrOutput{})
	pulumi.RegisterOutputType(K0sOutput{})
	pulumi.RegisterOutputType(K0sPtrOutput{})
	pulumi.RegisterOutputType(K0sSpecOutput{})
	pulumi.RegisterOutputType(K0sSpecPtrOutput{})
	pulumi.RegisterOutputType(KonnectivityOutput{})
	pulumi.RegisterOutputType(KonnectivityPtrOutput{})
	pulumi.RegisterOutputType(KubeProxyOutput{})
	pulumi.RegisterOutputType(KubeProxyPtrOutput{})
	pulumi.RegisterOutputType(KubeRouterOutput{})
	pulumi.RegisterOutputType(KubeRouterPtrOutput{})
	pulumi.RegisterOutputType(LocalhostOutput{})
	pulumi.RegisterOutputType(LocalhostPtrOutput{})
	pulumi.RegisterOutputType(MetadataOutput{})
	pulumi.RegisterOutputType(MetadataPtrOutput{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkPtrOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicyOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicyPtrOutput{})
	pulumi.RegisterOutputType(SSHOutput{})
	pulumi.RegisterOutputType(SSHPtrOutput{})
	pulumi.RegisterOutputType(SpecOutput{})
	pulumi.RegisterOutputType(StorageOutput{})
	pulumi.RegisterOutputType(StoragePtrOutput{})
	pulumi.RegisterOutputType(TelemetryOutput{})
	pulumi.RegisterOutputType(TelemetryPtrOutput{})
	pulumi.RegisterOutputType(UploadFileOutput{})
	pulumi.RegisterOutputType(UploadFileArrayOutput{})
	pulumi.RegisterOutputType(WinRMOutput{})
	pulumi.RegisterOutputType(WinRMPtrOutput{})
}
