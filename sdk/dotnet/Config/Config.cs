// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.K0s
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("k0s");

        private static readonly __Value<string?> _concurrency = new __Value<string?>(() => __config.Get("concurrency") ?? Utilities.GetEnv("PULUMI_K0S_CONCURRENCY") ?? "30");
        /// <summary>
        /// Maximum number of hosts to configure in parallel, set to 0 for unlimited
        /// </summary>
        public static string? Concurrency
        {
            get => _concurrency.Get();
            set => _concurrency.Set(value);
        }

        private static readonly __Value<string?> _concurrentUploads = new __Value<string?>(() => __config.Get("concurrentUploads") ?? Utilities.GetEnv("PULUMI_K0S_CONCURRENT_UPLOADS") ?? "5");
        /// <summary>
        /// Maximum number of files to upload in parallel, set to 0 for unlimited
        /// </summary>
        public static string? ConcurrentUploads
        {
            get => _concurrentUploads.Get();
            set => _concurrentUploads.Set(value);
        }

        private static readonly __Value<string?> _noDrain = new __Value<string?>(() => __config.Get("noDrain") ?? Utilities.GetEnv("PULUMI_K0S_NO_DRAIN") ?? "false");
        /// <summary>
        /// Do not drain worker nodes when upgrading
        /// </summary>
        public static string? NoDrain
        {
            get => _noDrain.Get();
            set => _noDrain.Set(value);
        }

        private static readonly __Value<string?> _noWait = new __Value<string?>(() => __config.Get("noWait") ?? Utilities.GetEnv("PULUMI_K0S_NO_WAIT") ?? "false");
        /// <summary>
        /// Do not wait for worker nodes to join
        /// </summary>
        public static string? NoWait
        {
            get => _noWait.Get();
            set => _noWait.Set(value);
        }

        private static readonly __Value<string?> _skipDowngradeCheck = new __Value<string?>(() => __config.Get("skipDowngradeCheck") ?? Utilities.GetEnv("PULUMI_K0S_SKIP_DOWNGRADE_CHECK") ?? "false");
        /// <summary>
        /// Skip downgrade check
        /// </summary>
        public static string? SkipDowngradeCheck
        {
            get => _skipDowngradeCheck.Get();
            set => _skipDowngradeCheck.Set(value);
        }

    }
}
